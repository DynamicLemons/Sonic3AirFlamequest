function void UpdateGlobalRingAnimation()
{
	// Update for Hyper Rings animation
	if (FlameQuest.hyperRingSpeed > 0)
	{
		FlameQuest.hyperRingProgress += FlameQuest.hyperRingSpeed
		FlameQuest.hyperRingAnimFrame = (FlameQuest.hyperRingProgress >> 9) % 4
		FlameQuest.hyperRingSpeed--
	}

	// In Oxygen, ouptut some debug stuff
	#if !GAMEAPP
	debugLog(stringformat("H: %04x | %04x | %04x", FlameQuest.hyperRingSpeed, FlameQuest.hyperRingAnimFrame, FlameQuest.hyperRingProgress))
	debugLog(stringformat("S: %04x | %04x | %04x", spilled_rings.speed, spilled_rings.animframe, spilled_rings.progress))
	#endif

	base.UpdateGlobalRingAnimation()
}

// TODO: Rework this to allow it to collect revamped Hyper Rings (see the
// comment above fn01a67a() for more details)
//# address-hook(0x01a596) end(0x01a5e8)
function void CollectRing()
{
	if (ring_counter < 999)
	{
		// Debug log in Oxygen
		#if !GAMEAPP
		debugLog(stringformat("%08x | %02x | %04x", A0, objA0.subtype2c, objA0.value32))
		#endif

		// Only collect a Hyper Ring if objA0 isn't Sonic or Miles
		if (objA0.subtype2c == 0x01 && !(A0 == 0xffffb000 || A0 == 0xffffb04a))
		{
			if (u16[0xfffffec8] < 999)	// This is a different ring counter I guess?
				u16[0xfffffec8] += objA0.value32
			ring_counter += objA0.value32
		}
		else
		{
			if (u16[0xfffffec8] < 999)	// This is a different ring counter I guess?
				++u16[0xfffffec8]

			++ring_counter
		}


		hud.dirty.rings |= 0x01

		if (checkForExtraLifeByRings())
		{
			gainExtraLife()
			return
		}
	}

	playSound(SFX_RING)
}

// Remove the Hyper Ring state upon death
function void Character.Die_noSound()
{
	if (A0 == 0xffffb000)
		FlameQuest.hyperRingActive = false

	base.Character.Die_noSound()
}

//# address-hook(0x01a6b6) end(0x01a734)
//# translated(0x01a6ae) end(0x01a758)
function void SpillRings()
{
	if (FlameQuest.hyperRingActive) // Start the Hyper Ring collection prcess
	{
		FlameQuest.hyperRingActive = false
		FlameQuest.spillHyperRings()
	}
	else
	{
		base.SpillRings()
	}
}

function void FlameQuest.spillHyperRings()
{
	// Calculate the value of each spilled Hyper Ring
	u16 hyperRingValue = (ring_counter - (ring_counter % 8)) / 8
	u8 ringsLeftOver = ring_counter % 8 // Remaining rings that would otherwise be lost

	// Spawn the spilled Hyper rings
	for(u8 i = 0; i < 8; i++)
	{
		u32[A1] = D6
		u8[A1 + 0x04] = (render_flag.WORLD | render_flag.VISIBLE) // Set render flags
		u8[A1 + 0x05] += 2
		u8[A1 + 0x07] = 8
		u16[A1 + 0x08] = 0x180
		u16[A1 + 0x0a] = 0xa6bc
		u32[A1 + 0x0c] = 0x01a99a
		objA1.position.x.u16 = objA0.position.x.u16
		objA1.position.y.u16 = objA0.position.y.u16
		u8[A1 + 0x1e] = 8
		u8[A1 + 0x1f] = 8
		u8[A1 + 0x28] = 0x47

		// Set the object's subtype and see what happens /shrug
		objA1.subtype2c = 0x01

		// Set the value of the Hyper Ring (using value32 since it's defined
		// as a 16-bit value in vanilla defines_object.lemon
		objA1.value32 = hyperRingValue

		// Add an additional ring if rings weren't exactly divisible by 8
		// (would also handle the case where there were < 8 rings
		if (ringsLeftOver)
		{
			objA1.value32++
			ringsLeftOver--
		}

		FlameQuest.hyperRingSpeed = 0xff

		if (D4.s16 >= 0)
		{
			// Entered only for every second ring (the others use x-mirrored directions)
			u8 angle = D4.u8
			u8 shift = D4.u16 >> 8
			D2.s16 = lookupSin(angle) << shift
			D3.s16 = lookupCos(angle) << shift

			// Go on with next angle (and possibly switch to a lower shift)
			if (D4.u8 < 0xf0)
			{
				D4.u8 += 0x10
			}
			else
			{
				D4.u16 -= 0x170
				if (D4.s16 < 0)
				{
					D4.s16 = 0x288
				}
			}
		}

		objA1.velocity.x = D2.u16
		objA1.velocity.y = D3.u16
		D2.s16 = -D2.s16
		D4.s16 = -D4.s16

		//
		if (!allocDynamicObjectAfterA0())
			break
	}

	playSound(SFX_SPILLRINGS)
	ring_counter = 0
	hud.dirty.rings = 0x80
	extra_lives_granted = 0

	if (global.inv_gravity)
	{
		fn01a7e8()
	}
	else
	{
		fn01a75c()
	}
}

// Update Spilled Ring (in normal gravity)
//# address-hook(0x01a75c) end(0x01a7be)
function void fn01a75c()
{
	// Hyper Ring
	if(objA0.subtype2c == 0x01)
	{
		FlameQuest.updateSpilledHyperRing()
	}
	// Run Normal Ring logic
	else
	{
		base.fn01a75c()
	}
}

// Function that updates spilled hyper ring in normal gravity
function void FlameQuest.updateSpilledHyperRing()
{
	objA0.animation.sprite = FlameQuest.hyperRingAnimFrame

	UpdateMovementStraightSimple()

	objA0.velocity.y += 0x16

	if (objA0.velocity.y >= 0)
	{
		D0.u8 = (global.framecounter + D7.u8) & 0x07
		if (D0.u8 == 0)
		{
			if (objA0.render_flags & render_flag.VISIBLE)
			{
				fn00f994()
				if (D1.s16 < 0)
				{
					objA0.position.y.u16 += D1.u16
					objA0.velocity.y = (objA0.velocity.y >> 2) - objA0.velocity.y
				}
			}

			if (FlameQuest.hyperRingSpeed == 0)
			{
				// Time over for this ring
				UnloadObject()
				return
			}

			if (objA0.position.y.u16 > move_area.bottom.current + getScreenHeight())
			{
				UnloadObject()
				return
			}
		}
	}

	AddAsDynamicObject()
	objA0.position.x.u16 -= u16[0xffffeebc]
	DrawObject()
}

// Update Spilled Rings (Inverted gravity)
//# address-hook(0x01a7e8) end(0x01a84a)
function void fn01a7e8()
{
	// Hyper Ring
	if(objA0.subtype2c == 0x01)
	{
		FlameQuest.updateSpilledHyperRingInverseGravity()
	}
	else
	{
		base.fn01a7e8()
	}
}

// Function that updates spilled hyper rings in inverted gravity
function void FlameQuest.updateSpilledHyperRingInverseGravity()
{
	objA0.animation.sprite = FlameQuest.hyperRingAnimFrame
	UpdateMovementStraight()

	objA0.velocity.y += 0x16 // Land Physics


	if (objA0.velocity.y >= 0)
	{
		D0.u8 = (global.framecounter + D7.u8) & 0x07
		if (D0.u8 == 0)
		{
			if (objA0.render_flags & render_flag.VISIBLE)
			{
				fn00fca0()
				if (D1.s16 < 0)
				{
					objA0.position.y.u16 -= D1.u16
					D0.s16 = objA0.velocity.y >> 2
					objA0.velocity.y -= D0.u16
					objA0.velocity.y = -objA0.velocity.y
				}
			}

			if ((FlameQuest.hyperRingSpeed == 0) || (objA0.position.y.u16 > move_area.bottom.current + getScreenHeight()))
			{
				UnloadObject()
				return
			}
		}
	}

	AddAsDynamicObject()
	D0.u16 = u16[0xffffeebc]
	objA0.position.x.u16 -= D0.u16
	DrawObject()
}
