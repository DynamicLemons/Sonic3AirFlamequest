// TODO: Most of this stuff probably shouldn't be in this file.

// Renderhooks #453454380937425
function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
	// This function gets called once when rendering an object, even if it consists of multiple VDP sprites
	//  -> That is in contrast to e.g. "Standalone.onDrawVdpSprite" which gets called for each VDP sprite
	//  -> So if an object's sprites should be replaced with a new loaded graphics, this here is the place to go

	u8 gameMode = global.game_mode & 0x7f
	bool prioFlag = (objA0.sprite_attributes & 0x8000) != 0

		// Spilled ring
		if ((objA0.update_address == 0x01a64a || objA0.update_address == 0x01a662) && objA0.base_state == 0x02)
		{
			// Use smoother ring rotation
			u16 animFrame = 0x00
			u8 alpha = 255
            u64 key = ""

            // Hyper Ring
            if (objA0.subtype2c == 0x01) // Render sprite based on if you have a Hyper Ring or not
            {
				animFrame = (FlameQuest.hyperRingProgress >> 8) % 8
				alpha = min(255, u16(FlameQuest.hyperRingSpeed) * 10)
				key = stringformat("hyper_ring_0%d", animFrame) // Hyper Ring
            }
            // Normal Ring
            else
            {
				animFrame = (spilled_rings.progress >> 8) % 8
				alpha = min(255, u16(spilled_rings.speed) * 10)
				key = stringformat("ring_0%d", animFrame) // Ring
            }


			Renderer.drawCustomSprite(key, px, py, 0x00, prioFlag ? SPRITE_FLAG_PRIO : 0, renderQueue, 0, alpha)
			return true
		}

    return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
}

// TODO: Rework this to allow it to collect revamped Hyper Rings (see the
// comment above fn01a67a() for more details)
//# address-hook(0x01a596) end(0x01a5e8)
function void CollectRing()
{
	if (ring_counter < 999)
	{
		// Debug log in Oxygen
		#if !GAMEAPP
		debugLog(stringformat("%08x | %02x | %04x", A0, objA0.subtype2c, objA0.value32))
		#endif

		// Only collect a Hyper Ring if objA0 isn't Sonic or Miles
        if (objA0.subtype2c == 0x01 && !(A0 == 0xffffb000 || A0 == 0xffffb04a))
        {
			if (u16[0xfffffec8] < 999)	// This is a different ring counter I guess?
				u16[0xfffffec8] += objA0.value32
			ring_counter += objA0.value32
        }
        else
        {
			if (u16[0xfffffec8] < 999)	// This is a different ring counter I guess?
				++u16[0xfffffec8]

        	++ring_counter
        }


		hud.dirty.rings |= 0x01

		if (checkForExtraLifeByRings())
		{
			gainExtraLife()
			return
		}
	}

	playSound(SFX_RING)
}

// Remove the Hyper Ring state upon death
function void Character.Die_noSound()
{
	if (A0 == 0xffffb000)
		FlameQuest.hyperRingActive = false

	base.Character.Die_noSound()
}


//# address-hook(0x010294) end(0x010364)
function void Character.GettingHurt()
{
	bool canLoseShield = true	// Usually true, gets false e.g. for 2nd player Tails
	bool isProtectedByObject = ((char.protection_flag & 0x80) != 0)
	bool spilledRings = false

	u16 rings = ring_counter
	if (A0 != 0xffffb000)
	{
		// It's the second player
		if (competition_mode.active)
		{
			rings = u16[0xfffffed0]
		}
		else
		{
			canLoseShield = false
		}
	}

	if (canLoseShield && (char.bonus_effect & char.bonus.ANY_SHIELD) == 0)
	{
		if (!isProtectedByObject)
		{
			// No more rings?
			if (rings == 0)
			{
				D0 = getSoundIdByObstacleAddress(u32[A2])
				Character.Die_internal()
				return
			}

			// Create ring spill object
			if (allocDynamicObjectStd())
			{
				objA1.update_address = 0x01a64a
				objA1.position.x.u16 = char.position.x.u16
				objA1.position.y.u16 = char.position.y.u16
				u16[A1 + 0x3e] = A0.u16
			}
			spilledRings = true

			// Should be unnecessary, but make sure all shield flags are cleared
			char.bonus_effect &= 0x8e
		}
	}
	else
	{
	#if STANDALONE
		// When using e.g. the MGZ spinning top, do not lose your shield
		if (!isProtectedByObject)
	#endif
		{
			// Lose shield
			char.bonus_effect &= 0x8e
		}
	}

	char.base_state = 0x04
	Character.LandingOnGroundNoSpindash()
	char.flags |= char.flag.IN_AIR // Tweaked hit physics to hopefully not break he current pace of the game
	{
		char.velocity.x = -0x150
		char.velocity.y = -0x350
	}
	if (char.position.x.u16 >= u16[A2 + 0x10])
	{
		char.velocity.x = -char.velocity.x
	}

	char.groundspeed = 0
	char.state = char.state.GOT_HURT
	char.invuln.countdown = 120

#if STANDALONE
	if (char.character == CHARACTER_SONIC)
	{
		// Reset drop dash
		sonic.dropdash_counter = 0
	}

	// In standalone, don't play the sound when rings got spilled
	//  -> This check is not necessary in emulation, as the ring spill sound kills this one (only one of both can be played)
	if (!spilledRings)
#endif
	{
		playSound(getSoundIdByObstacleAddress(u32[A2]))
	}
	D0 = 0xffffffff
}

// TODO: Revamp the Hyper Ring system to spawn its own rings (with their
// own values) rather than using normal spilled rings. (also involves SpillRings())
//# address-hook(0x01a67a) end(0x01a6ac)
function void fn01a67a() // Determine how many rings to spawn
{
	u16 maxRings

	D6 = global.inv_gravity ? 0x01a662 : 0x01a64a // Update Address for spawned spilled rings
	if (FlameQuest.hyperRingActive == 1)
	{
		maxRings = 8
	}
	else
	{
	#if STANDALONE
		// Standalone uses a higher limit
		maxRings = 48
	#else
		// Limit to 32 rings spilled
		maxRings = 32
	#endif
	}

	A1 = A0
	D5 = (u8[A0 + 0x3f] == 0) ? ring_counter : u16[0xfffffed0]
	D5.u16 = min(D5.u16, maxRings) - 1
	D4.u16 = 0x288
	SpillRings()
}

//# address-hook(0x01a6b6) end(0x01a734)
//# translated(0x01a6ae) end(0x01a758)
function void SpillRings()
{
	if (FlameQuest.hyperRingActive) // Start the Hyper Ring collection prcess
	{
		FlameQuest.hyperRingActive = false
		FlameQuest.spillHyperRings()
	}
	else
	{
		base.SpillRings()
	}

}

function void FlameQuest.spillHyperRings()
{
	// Calculate the value of each spilled Hyper Ring
	u16 hyperRingValue = (ring_counter - (ring_counter % 8)) / 8
	u8 ringsLeftOver = ring_counter % 8 // Remaining rings that would otherwise be lost

	// Spawn the spilled Hyper rings
	while (D5.s16 >= 0)
	{
		u32[A1] = D6
		u8[A1 + 0x04] = (render_flag.WORLD | render_flag.VISIBLE) // Set render flags
		u8[A1 + 0x05] += 2
		u8[A1 + 0x07] = 8
		u16[A1 + 0x08] = 0x180
		u16[A1 + 0x0a] = 0xa6bc
		u32[A1 + 0x0c] = 0x01a99a
		objA1.position.x.u16 = objA0.position.x.u16
		objA1.position.y.u16 = objA0.position.y.u16
		u8[A1 + 0x1e] = 8
		u8[A1 + 0x1f] = 8
		u8[A1 + 0x28] = 0x47

		// Set the object's subtype and see what happens /shrug
		objA1.subtype2c = 0x01

		// Set the value of the Hyper Ring (using value32 since it's defined
		// as a 16-bit value in vanilla defines_object.lemon
		objA1.value32 = hyperRingValue

		// Add an additional ring if rings weren't exactly divisible by 8
		// (would also handle the case where there were < 8 rings
		if (ringsLeftOver)
		{
			objA1.value32++
			ringsLeftOver--
		}

		FlameQuest.hyperRingSpeed = 0xff

		if (D4.s16 >= 0)
		{
			// Entered only for every second ring (the others use x-mirrored directions)
			u8 angle = D4.u8
			u8 shift = D4.u16 >> 8
			D2.s16 = lookupSin(angle) << shift
			D3.s16 = lookupCos(angle) << shift

			// Go on with next angle (and possibly switch to a lower shift)
			if (D4.u8 < 0xf0)
			{
				D4.u8 += 0x10
			}
			else
			{
				D4.u16 -= 0x170
				if (D4.s16 < 0)
				{
					D4.s16 = 0x288
				}
			}
		}
		objA1.velocity.x = D2.u16
		objA1.velocity.y = D3.u16
		D2.s16 = -D2.s16
		D4.s16 = -D4.s16

		// Next ring
		--D5.s16
		if (D5.s16 < 0)
			break
		if (!allocDynamicObjectAfterA0())
			break
	}

	playSound(SFX_SPILLRINGS)
	ring_counter = 0
	hud.dirty.rings = 0x80
	extra_lives_granted = 0

	if (global.inv_gravity)
	{
		fn01a7e8()
	}
	else
	{
		fn01a75c()
	}
}

// Update Spilled Ring (in normal gravity)
//# address-hook(0x01a75c) end(0x01a7be)
function void fn01a75c()
{
	// Hyper Ring
	if(objA0.subtype2c == 0x01)
	{
		FlameQuest.updateSpilledHyperRing()
	}
	// Run Normal Ring logic
	else
	{
		FlameQuest.updateSpilledRing()
	}

}

// Function that updates spilled ring in normal gravity
function void FlameQuest.updateSpilledRing()
{
	objA0.animation.sprite = spilled_rings.animframe
	UpdateMovementStraightSimple()
	
	if (objA0.position.y.u16 >= water.height.current)
	{
		//Underwater Velocity.
		objA0.velocity.y += 0x14
	}
	else
	{
		objA0.velocity.y += 0x18
	}

	if (objA0.velocity.y >= 0)
	{
		D0.u8 = (global.framecounter + D7.u8) & 0x07
		if (D0.u8 == 0)
		{
			if (objA0.render_flags & render_flag.VISIBLE)
			{
				fn00f994()
				if (D1.s16 < 0)
				{
					objA0.position.y.u16 += D1.u16
					objA0.velocity.y = (objA0.velocity.y >> 2) - objA0.velocity.y
				}
			}

			if (spilled_rings.speed == 0)
			{
				// Time over for this ring
				UnloadObject()
				return
			}

			if (objA0.position.y.u16 > move_area.bottom.current + getScreenHeight())
			{
				UnloadObject()
				return
			}
		}
	}

	AddAsDynamicObject()
	objA0.position.x.u16 -= u16[0xffffeebc]
	DrawObject()
}

// Function that updates spilled hyper ring in normal gravity
function void FlameQuest.updateSpilledHyperRing()
{
	objA0.animation.sprite = FlameQuest.hyperRingAnimFrame

	UpdateMovementStraightSimple()

	if (objA0.position.y.u16 >= water.height.current)
	{
		objA0.velocity.y += 0x12
	}
	else
	{
		objA0.velocity.y += 0x16
	}

	if (objA0.velocity.y >= 0)
	{
		D0.u8 = (global.framecounter + D7.u8) & 0x07
		if (D0.u8 == 0)
		{
			if (objA0.render_flags & render_flag.VISIBLE)
			{
				fn00f994()
				if (D1.s16 < 0)
				{
					objA0.position.y.u16 += D1.u16
					objA0.velocity.y = (objA0.velocity.y >> 2) - objA0.velocity.y
				}
			}

			if (FlameQuest.hyperRingSpeed == 0)
			{
				// Time over for this ring
				UnloadObject()
				return
			}

			if (objA0.position.y.u16 > move_area.bottom.current + getScreenHeight())
			{
				UnloadObject()
				return
			}
		}
	}

	AddAsDynamicObject()
	objA0.position.x.u16 -= u16[0xffffeebc]
	DrawObject()
}

// Update Spilled Rings (Inverted gravity)
//# address-hook(0x01a7e8) end(0x01a84a)
function void fn01a7e8()
{
	// Hyper Ring
	if(objA0.subtype2c == 0x01)
	{
		FlameQuest.updateSpilledHyperRingInverseGravity()
	}
	else
	{
		FlameQuest.updateSpilledRingInverseGravity()
	}
}

// Function that updates spilled hyper rings in inverted gravity
function void FlameQuest.updateSpilledHyperRingInverseGravity()
{
	objA0.animation.sprite = FlameQuest.hyperRingAnimFrame
	UpdateMovementStraight()

	if (objA0.position.y.u16 >= water.height.current)
	{
		objA0.velocity.y += 0x12 // Water physics
	}
	else
	{
		objA0.velocity.y += 0x16 // Land Physics
	}

	if (objA0.velocity.y >= 0)
	{
		D0.u8 = (global.framecounter + D7.u8) & 0x07
		if (D0.u8 == 0)
		{
			if (objA0.render_flags & render_flag.VISIBLE)
			{
				fn00fca0()
				if (D1.s16 < 0)
				{
					objA0.position.y.u16 -= D1.u16
					D0.s16 = objA0.velocity.y >> 2
					objA0.velocity.y -= D0.u16
					objA0.velocity.y = -objA0.velocity.y
				}
			}

			if ((FlameQuest.hyperRingSpeed == 0) || (objA0.position.y.u16 > move_area.bottom.current + getScreenHeight()))
			{
				UnloadObject()
				return
			}
		}
	}

	AddAsDynamicObject()
	D0.u16 = u16[0xffffeebc]
	objA0.position.x.u16 -= D0.u16
	DrawObject()
}

// Function that updates normal spilled rings in inverted gravity
function void FlameQuest.updateSpilledRingInverseGravity()
{
	objA0.animation.sprite = spilled_rings.animframe
	UpdateMovementStraight()


	if (objA0.position.y.u16 >= water.height.current)
	{
		objA0.velocity.y += 0x14 // Water Physics
	}
	else
	{
		objA0.velocity.y += 0x18 // Land Physics
	}

	if (objA0.velocity.y >= 0)
	{
		D0.u8 = (global.framecounter + D7.u8) & 0x07
		if (D0.u8 == 0)
		{
			if (objA0.render_flags & render_flag.VISIBLE)
			{
				fn00fca0()
				if (D1.s16 < 0)
				{
					objA0.position.y.u16 -= D1.u16
					D0.s16 = objA0.velocity.y >> 2
					objA0.velocity.y -= D0.u16
					objA0.velocity.y = -objA0.velocity.y
				}
			}

			if ((spilled_rings.speed == 0) || (objA0.position.y.u16 > move_area.bottom.current + getScreenHeight()))
			{
				UnloadObject()
				return
			}
		}
	}

	AddAsDynamicObject()
	D0.u16 = u16[0xffffeebc]
	objA0.position.x.u16 -= D0.u16
	DrawObject()
}
