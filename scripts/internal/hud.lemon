// HUD script, also stores FBZ and LRZ gimmicks (for now)

define boss.remaining_hits	= u8[A0 + 0x29]
global u8 bosshphealthbar = 0

#if STANDALONE
function void HUD.drawSprite(u64 key, u16 px, u16 py, u16 renderQueue)
{
	Renderer.drawCustomSprite(key, px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
}

function void HUD.drawDigit(u8 digit, u16 px, u16 py, u16 renderQueue)
{
	Renderer.drawCustomSprite(stringformat("hud_digit_%d", digit), px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
}

function void HUD.drawRingDigit(u8 digit, u16 px, u16 py, u16 renderQueue)
{
	if (FlameQuest.hyperRingActive == 1)
	{
		Renderer.drawCustomSprite(stringformat("hud_hyper_digit_%d", digit), px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
	}
	else
	{
		Renderer.drawCustomSprite(stringformat("hud_digit_%d", digit), px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
	}
}

// Fix number hud positioning
function void HUD.drawNumber(u64 stringMask, u32 number, u16 px, u16 py, u16 renderQueue)
{
	while (true)
	{
		u8 digit = number % 10
		Renderer.drawCustomSprite(stringformat(stringMask, digit), px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
		px -= 10
		number /= 10
		if (number == 0)
			break
	}
}
#endif


//# address-hook(0x00db3c) end(0x00db42)
function void fn00db3c()
{
	RenderHUD()
}

// Unfortunately, can't base. this due to font widths...
//# address-hook(0x00db44) end(0x00dbb2)
function void RenderHUD()
{
#if STANDALONE
	if (DEBUG_DISABLE_HUD)
		return
#endif

	s16 baseX = global.level_started
	if (baseX < 0)
	{
		baseX += 8
		global.level_started = baseX
	}

	baseX += 0x0f
	s16 baseY = 0x08
	u16 renderQueue = 0xe000

	bool isBonusStage = (global.zone >= 0x13 && global.zone <= 0x15)
#if STANDALONE
	if (!debug_mode.state)
	{
		if (!isBonusStage)
		{
			// Score
			HUD.drawSprite("hud_text_score", baseX, baseY, renderQueue)
			++renderQueue
			HUD.drawNumber("hud_digit_%d", player.score * 10, baseX + 0x64, baseY, renderQueue)
			++renderQueue

			// Draw the FBZ Time limit
			// Probably going to remove this in favor of having the timer
			// count down in FBZ instead of counting up (this would only
			// be a visual thing, internally it'd still count upwards)
			if (global.zone_act.apparent == 0x0401 && DevToolsFBZ2TimeLimit == 1 && camera.foreground.x.u16 < 0x2900)
			{
				if (level.boss_encounter == 0)
				{
					HUD.drawSprite("fbz_time_limit_1", baseX + 0x64, baseY + 0x11, renderQueue)
					++renderQueue
				}
			}

			// Time
			{
				bool show = (timer.minutes < 9 || isBonusStage || (level.framecounter & 0x08) || Game.getSetting(SETTING_INFINITE_TIME))
				HUD.drawSprite(show ? "hud_text_time" : "hud_text_time_red", baseX, baseY + 0x10, renderQueue)
				++renderQueue

				// Unfortunately, the time progress is done later inside the frame, so we don't have the right value in "timer.frames" yet
				//  -> If the conditions for time progress are met, add one and everything will be alright
				u16 minutes = timer.minutes
				u16 seconds = timer.seconds
				u16 frames = timer.frames
				if (hud.dirty.timer && !global.game.paused && timer.alldata < 0x93b3b)	// That is 9:59 and 59 frames
				{
					++frames
					seconds += (frames / 60)
					minutes += (seconds / 60)
					frames %= 60
					seconds %= 60
				}

				u16 centiseconds = (frames * 99 + 30) / 59
				u16 px = (minutes >= 10) ? (baseX + 8) : baseX
				if (minutes >= 10)
					HUD.drawDigit(minutes / 10, px + 0x24, baseY + 0x10, renderQueue)
				HUD.drawDigit(minutes % 10, px + 0x2c, baseY + 0x10, renderQueue)
				HUD.drawSprite("hud_char_minutes", px + 0x36, baseY + 0x10, renderQueue)
				HUD.drawDigit(seconds / 10, px + 0x3c, baseY + 0x10, renderQueue)
				HUD.drawDigit(seconds % 10, px + 0x46, baseY + 0x10, renderQueue)
				HUD.drawSprite("hud_char_seconds", px + 0x51, baseY + 0x10, renderQueue)
				HUD.drawDigit(centiseconds / 10, px + 0x5a, baseY + 0x10, renderQueue)
				if (minutes < 10)
					HUD.drawDigit(centiseconds % 10, px + 0x64, baseY + 0x10, renderQueue)
				++renderQueue
			}
		}

		// Rings & Hyper Ring icon
		{
			u16 py = (isBonusStage) ? baseY : baseY + 0x20
			bool show = (ring_counter != 0 || (level.framecounter & 0x08))
			HUD.drawSprite(show ? "hud_text_rings" : "hud_text_rings_red", baseX, py, renderQueue)
			++renderQueue

			u64 hyperRinganimframe = ""
			hyperRinganimframe = stringformat("hud_hyper_ring_%d", (level.framecounter >> 4) % 8)

			if (FlameQuest.hyperRingActive == 1)
			{
				HUD.drawSprite(hyperRinganimframe, baseX + 0x75, py, renderQueue)
			}

			u16 px = baseX + 0x64
			for (u32 value = ring_counter;;)
			{
				if (IsLosingRings == 1)
				{
					if (level.framecounter & 0x08)
					{
						HUD.drawRingDigit(value % 10, px, py, renderQueue)
					}
				}
				else
				{
					HUD.drawRingDigit(value % 10, px, py, renderQueue)
				}

				px -= 10
				value /= 10
				if (value == 0)
					break
			}
			++renderQueue
		}

		// Lives (not visible in Time Attack)
		if (!Game.isTimeAttack() && !Game.getSetting(SETTING_INFINITE_LIVES))
		{
			u64 characterName
			if (getMainCharacter() == CHARACTER_SONIC)
				characterName = "sonic"
			else if (getMainCharacter() == CHARACTER_TAILS)
				characterName = (global.region_code & 0x80) ? "tails" : "miles"
			else
				characterName = "knuckles"
			HUD.drawSprite(stringformat("hud_lives_icon_%s", characterName), baseX, 200, renderQueue)
			HUD.drawSprite("hud_x", baseX + 0x18, 200, renderQueue)
			//HUD.drawSprite(stringformat("hud_bg_%s", characterName), getScreenWidth() / 2, getScreenHeight() / 2, renderQueue-100)
			++renderQueue

			if (lives_counter >= 10)
				HUD.drawDigit(u16((lives_counter / 10) % 10), baseX + 0x20, 202, renderQueue)
			HUD.drawDigit(u16(lives_counter % 10), baseX + 0x2a, 202, renderQueue)
		}
	}
	else
#endif
	{
		D4 = (isBonusStage) ? 8 : 0

		if ((level.framecounter & 0x08) == 0)
		{
			if (ring_counter == 0)
			{
				D4 += 2
			}
			if (timer.minutes == 9 && !isBonusStage)
			{
				D4 += 4
			}
		}

		// Targets:
		//  - 0x00dbc2	-> D4.u16 = 0x00
		//  - 0x00dc00	-> D4.u16 = 0x02
		//  - 0x00dc32	-> D4.u16 = 0x04
		//  - 0x00dc96	-> D4.u16 = 0x08
		//  - 0x00dcb6	-> D4.u16 = 0x0a
		A1 = tableLookupAddress(0x00dbb6, D4.u16)

		D4.s16 = u16[A1] - 1
		D0.s16 = baseX + 0x80
		D1.u16 = 0x0108
		D5.u16 = 0x86ca
		A1 += 2
		if (D4.s16 >= 0)
		{
			writeToSpriteTable(renderQueue)
		}
	}
}

//# address-hook(0x00dd06) end(0x00de86)
function void UpdateTimeAndHud()
{
	if (competition_mode.active == 0)
	{
		if (debug_mode.state == 0)
		{
			// Update score
			if (hud.dirty.score)
			{
				hud.dirty.score = 0
				D0 = 0x5c800003
				D1 = player.score
				RefreshScoreHudDisplay()
			}

			// Update rings
			if (hud.dirty.rings != 0)
			{
				if (hud.dirty.rings & 0x80)
				{
					ResetRingsDisplay()
				}
				hud.dirty.rings = 0
				D0 = 0x5f400003
				D1 = ring_counter
				RefreshRingsHudDisplay()
			}

			// Update time
			bool updateTimerHUD = false
			if (hud.dirty.timer & 0x80)
			{
				hud.dirty.timer = 0x01
				updateTimerHUD = true
			}
			else if (hud.dirty.timer != 0 && !global.game.paused)
			{
			#if STANDALONE
				if (Game.getSetting(SETTING_INFINITE_TIME))
				{
					if (timer.alldata == 0x3b3b3b)		// That is 59:59 and 59 frames
					{
						// Reset back to 0
						timer.alldata = 0
					}
				}
				else
			#endif
				{
					if (timer.alldata == 0x93b3b || timer.alldata == 0x23b3b && global.zone_act.apparent == 0x0401 && DevToolsFBZ2TimeLimit == 1 && camera.foreground.x.u16 < 0x2900)		// That is 9:59 and 59 frames for any act that is not fbz 2
					{
						// Time over
						hud.dirty.timer = 0
						A0 = 0xffffb000
						if (objA0.base_state < 0x06 && global.zone != 0x15)
						{
							A2 = A0
							Character.Die()
						}
						global.time_over = 1
						if global.zone_act == 0x0401
						{
						    checkpoint.number = 0
						}
						return
					}
				}

				// Time progress
				++timer.frames
				if (timer.frames >= 60)
				{
					timer.frames = 0
					++timer.seconds
					if (timer.seconds >= 60)
					{
						timer.seconds = 0
						++timer.minutes

					#if STANDALONE
						if (!Game.getSetting(SETTING_INFINITE_TIME))
					#endif
						{
							timer.minutes = min(timer.minutes, 9)
						}
					}
					updateTimerHUD = true
				}
			}

			if (updateTimerHUD)
			{
				D0 = VDPHelper.getDirectVRAMWriteCode(0xde40)
				D1 = min(timer.minutes, 9)
				RefreshTimeMinutesHudDisplay()

				D0 = VDPHelper.getDirectVRAMWriteCode(0xdec0)
				D1 = timer.seconds
				RefreshTimeSecondsHudDisplay()
			}

			// Update lives
			if (hud.dirty.lives != 0)
			{
				hud.dirty.lives = 0
				UpdateHudLivesDisplay()
			}
		}
		else
		{
			// Debug mode
			DebugModePositionDisplay()
			if (hud.dirty.rings != 0)
			{
				if (hud.dirty.rings & 0x80)
				{
					ResetRingsDisplay()
				}
				hud.dirty.rings = 0
				D0 = 0x5f400003
				D1 = ring_counter
				RefreshRingsHudDisplay()
			}

			D0 = VDPHelper.getDirectVRAMWriteCode(0xde40)
			D1 = global.lag_frames
			RefreshTimeMinutesHudDisplay()

			D0 = VDPHelper.getDirectVRAMWriteCode(0xdec0)
			D1 = u8[0xfffff62c]
			RefreshTimeSecondsHudDisplay()

			if (hud.dirty.lives != 0)
			{
				hud.dirty.lives = 0
				UpdateHudLivesDisplay()
			}

			if (!global.game.paused)
			{
				A1 = 0xfffffe26
				--A1
				++u8[A1]
				if (u8[A1] >= 60)
				{
					u8[A1] = 0
					--A1
					++u8[A1]
					if (u8[A1] >= 60)
					{
						u8[A1] = 0
						--A1
						++u8[A1]
						if (u8[A1] >= 9)
						{
							u8[A1] = 9
						}
					}
				}
			}
		}
	}
	else
	{
		if (debug_mode.enabled)
		{
			DebugModePositionDisplay()
		}
	}
}

function void HUD.drawSpotlight(u16 px, u16 py)
{
	Renderer.drawCustomSprite("lrz_smoke", px, py, 0, SPRITE_FLAG_PRIO, 0xe000, 0, 0xffffffff, 0xf000)
}
