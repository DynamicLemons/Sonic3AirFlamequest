// TODO: Remove this in favor of using HSL functions to change character
// paletes dynamically
function u64 getCharacterPaletteKey(u8 character)
{
	bool isBonusStage = (global.zone >= 0x13 && global.zone <= 0x15)

	// TODO: Restore this function to vanilla and use the HSL functions to
	// generate palettes instead

	// Current zone
	bool isCorrectZone = (!isBonusStage) && (global.zone.apparent != 0x00) && !(global.zone.apparent >= 0x0a && global.zone.apparent <= 0x0c)

	// Character and current state
	u64 characterString = (character == CHARACTER_SONIC) ? "sonic" : ((character == CHARACTER_TAILS) ? "tails" : "knuckles")
	u64 characterForm = (super.active & 0x80 || super.active.tails & 0x80) ? "scorching" : "burning"
	u64 characterTemp = isCorrectZone ? "hot" : "normal"

	if(character != CHARACTER_KNUCKLES)
		return stringformat("character_palette_%s_%s_%s", characterForm, characterString, characterTemp)
	else
		return "character_palette_knuckles"

}

// Load Knux' palette into RAM as HSL for palette shenanigans
// In the RGB Knux mod, this will also check for mods w/ RGB Knux compatibility,
// but since FQ isn't that I'll forgo the checks for now
function void loadCharacterPalette(u8 character, u32 targetAddress, u8 paletteVariant)
{
	// Run the vanilla palette loading code
	base.loadCharacterPalette(character, targetAddress, paletteVariant)

	// Load knux palettes
	if(character == CHARACTER_KNUCKLES)
	{
		// Get palette address based on palette variant
		u32 paletteAddress = (!paletteVariant ? FlameQuest.RGB_KNUX_PALETTE : FlameQuest.RGB_KNUX_PALETTE_WATER)

		if(EXTENDED_CHARACTER_PALETTES)
		{
			// The vanilla palette loading code uses shared memory to store colors,
			// so we can use this to easily convert all of Knux' colors to HSL
			for (u8 i = 0; i < 0x20; ++i)
			{
				u32 rgba = u32[0x800000 + i * 4]
				u32[paletteAddress + i * 4] = DKoC.Util.abgrToHSL(rgba)
			}

		}
		// Vanilla palette loading.
		else
		{
			// Copy and unpack colors from ROM
			for(u8 i = 0; i < 0x10; i++)
			{
				u32 rgba = unpackColor(u16[0x0a8afc + i * 2])
				u32[paletteAddress + i * 4] = DKoC.Util.abgrToHSL(rgba)
			}
		}
	}
}

// Palette Effects function
function void UpdatePaletteEffects()
{
	base.UpdatePaletteEffects()

	// Handle RGB Knux stuff
	// Code in: scripts/eastereggs/rgb_knux.lemon
	if(getMainCharacter() == CHARACTER_KNUCKLES && FlameQuest.Secret.useRGBKnux && !outro.wait_time)
	{
		FlameQuest.RGBKnux.updateRGBKnux()
	}
}
