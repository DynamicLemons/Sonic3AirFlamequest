//Fq.SageMode
//"sagejingle"

//# address-hook(0x003e32) end(0x004342)
function void TitleScreen()
{
	playMusic(MUSIC_CTRL_FADEOUT)
	kosinski.queue_size = 0

	zeroMemory(0xffffff10, 0x6c)

	ClearPatternLoadingQueue()
	global.zone_act = 0
	FadeOutScreenBlocking()
	set_status_register(0x2700)

	VDP.Config.enableHInt(false)
	VDP.Config.setNameTableBasePlaneA(0xc000)
	VDP.Config.setNameTableBasePlaneB(0xe000)
	VDP.Config.setPlayfieldSizeInPixels(512, 256)
	VDP.Config.setupWindowPlane(false, 0)			// Disable window plane
	VDP.Config.setVerticalScrolling(false, 0xff)	// Good old horizontal scrolling mode
	VDP.Config.setBackdropColor(0)
	VDP.Config.setRenderingModeConfiguration(false)

	water.fullscreen = 0
	level.water_present = 0

	fn0011ca()

	zeroMemory(0xffffac00, 0x400)
	zeroMemory(0xffffb000, 0x2000)
	zeroMemory(0xfffff700, 0x100)
	zeroMemory(0xffffee00, 0x100)

#if STANDALONE
	Renderer.resetSprites()

	// Move planes a bit to the right
	for (u8 i = 0; i < getScreenHeight(); ++i)
		u32[0xffffe000 + i*4] = getScreenExtend() * 0x10001
#endif

	fn01aa6e()

	zeroMemory(0xfffffc00, 0x100)

	checkpoint.number = 0
	global.stage_type = 0
	debug_mode.state = 0
	global.rolling_demo = 0
	u16[0xfffff634] = 0
	competition_mode.active = 0
	global.level_started = 0
	debug_mode.enabled.u8 = 0
	competition_mode.active = 0
	u16[0xffffffe4] = 0
	u16[0xffffffe6] = 0
	bluespheres.minigame_mode = 0
	global.demo_countdown = 359		// 6 seconds (minus one frame)
	u16[0xfffffb00] = 0
	u32[0xfffffbfc] = 0xfffffb00
/*
#if STANDALONE
	if (Game.getSetting(SETTING_TITLE_SCREEN))
#else
	if (global.lock_on_state != 0)
#endif
	{
		// Sonic & Knuckles title screen
		TitleScreen_SK()
		return
	}
*/
	Kosinski.decompress(0x350d26, 0xffff0000)	// After this, A1 points to where uncompressed data ends
	updateSpritePattern(0xffff0000, 0x0000, A1.u16 >> 1)

	Enigma.decompress(0x34f6a0, 0xffff8000, 0x0000)
	if ((global.region_code & 0x80) == 0)
	{
		u32[0xffff83ac] = 0
	}
	copyRectToVRAM(0xffff8000, 0xc000, 0x28, 0x1c)

	copyMemory(0xfffffc80, 0x00460c, 0x20)

	global.demo_countdown = 240		// 4 seconds
	VDP.Config.setActiveDisplay(true)
	Menu.FadeInAfterInit()

#if STANDALONE
	// Stop any music that might be playing or restarting (this can happen after aborting a rolling demo)
	playMusic(MUSIC_CTRL_STOP)
#endif
	playMusic(0xff)

	global.demo_countdown = 180		// 3 seconds
	while (global.demo_countdown != 0)
	{
		global.frame_state = 0x14
		waitForNextFrame()
	@EntryPoint_003fd2:

		if (control.pad1.pressed & CONTROL_START)
		{
			playMusic(MUSIC_CTRL_STOP)
			break
		}

	#if STANDALONE
		Renderer.resetSprites()
		Renderer.drawCustomSprite("original_game_by", getScreenWidth() / 2 - 85, 60, 0x00, 0, 0x2000, 0, 96)
	#endif
	}

	FadeOutScreenBlocking() // ye

#if !STANDALONE
	playMusic(0xfe)
#endif

	// While loop: SEGA logo background fade from white to black
	A1 = 0x00459c
	while (false)
	{
		global.frame_state = 0x02
		waitForNextFrame()

		copyMemory(0xfffffc00, A1, 0x0e)
		if (u16[A1] == 0)
			break

		A1 += 0x0e

	#if STANDALONE
		Renderer.resetSprites()
		if (u8[0xfffffc01] & 0x0e)
			Renderer.drawCustomSprite("original_game_by", getScreenWidth() / 2 - 85, 60, 0x00, 0, 0x2000, 0, u16(u8[0xfffffc01] & 0x0e) * 96 / 0x0e)
	#endif
	}

	outro.wait_time = 0
	u16[0xfffff662] = 0
	u8[0xffffffbc] = 0xff
	titleintro.frames = 0
	titleintro.animstep = 1
	D0 = 1
	fn00440c()

	global.demo_countdown = (global.region_code & 0x40) ? 750 : 900
#if STANDALONE
	// Slightly increase the wait time until demo starts
	global.demo_countdown += 20
#endif

	Kosinski.addToDecompressionQueue(0x351c86, 0xffff0000)

	// While loop: Intro sequence with Sonic running towards the camera
	while (false) // changed to false
	{
		global.frame_state = 0x04
		Kosinski.ProcessDecompressionQueue()

		waitForNextFrame()

	#if STANDALONE
		// Overwrite two frames with custom widescreen versions
		if (titleintro.animstep == 7)
		{
			Renderer.drawCustomSprite("intro_wideframe1", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 8)
		{
			Renderer.drawCustomSprite("intro_wideframe2", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
	#endif

		fn0043d4()
		UpdateGameObjects()
		RenderSprites()
		LoadRequiredSpritePatterns()

		if (control.pad1.pressed & CONTROL_START)
			break

		if (titleintro.animstep >= 12)
			break
	}
	
	// White screen
	titleintro.animstep = 12
	// change 0x0eee to 0x0000
	fillMemory_u16(0xfffffc00, 0x80, 0x0000)
	
#if STANDALONE
	titleintro.frames = 0 //15
	global.frame_state = 0x04
	for (u8 k = 0; k < titleintro.frames; ++k)
	{
		waitForNextFrame()
	}
	
	// This is to make sure screen stays white in the next frame even if skipping the intro
	VDP.Config.setActiveDisplay(false)
#else
	titleintro.frames = 3
	global.frame_state = 0x04
	waitForNextFrame()
#endif
	
	// Fill the planes with decompressed screen content
	Kosinski.decompress(0x359fc6, 0xffff0000)	// After this, A1 points to where uncompressed data ends
	updateSpritePattern(0xffff0000, 0x0000, A1.u16 >> 1)

	Enigma.decompress(0x350018, 0xffff8000, 0x8000)
	copyRectToVRAM(0xffff8000, 0xc000, 0x28, 0x1c)

	Enigma.decompress(0x350112, 0xffff8000, 0x4000)
	copyRectToVRAM(0xffff8000, 0xe000, 0x28, 0x1c)

	global.frame_state = 0x04
	waitForNextFrame()

	Menu.FadeInAfterInit() // Fade in instead of instantly changing

	if (Fq.SageMode == 1) // draw for ONE frame
	{
		Renderer.drawCustomSprite("sage_bg", getScreenExtend() - 40, 0, 0x00, SPRITE_FLAG_PRIO, 0xF000)
	}
#if STANDALONE
	VDP.Config.setActiveDisplay(true) // not sure what this does but it fixes things
#endif

	copyMemory(0xfffffc80, 0x0047ac, 0x80)

	// Load patterns used in title screen
	{
		// Large banner
		Nemesis.loadDataToVRAM(0x35026c, 0xa000)

		// Menu options
		Nemesis.loadDataToVRAM(0x004d2a, 0xd000)

		// Wiggling finger, twinkle, Tails & Tornado in BG
		Nemesis.loadDataToVRAM(0x2c49cc, 0x8000)

		// "& Knuckles"
		Nemesis.loadDataToVRAM(0x0d6498, 0x9800)
	}
	
	u64 timemax = 600
	if (Fq.SageMode == 1)
	{
		u16 basex = getScreenWidth()/2
		u16 basey = getScreenHeight()/2
		
		if (Fq.SageLogo.Screentime == 0)
		{
			Fq.SageLogo.Screentime = timemax
			Audio.playAudio("sagejingle", AudioContext.CONTEXT_MUSIC)
			Fq.SageLogo.flashtimer = 0
			Fq.SageLogo.logotimer = 0
			
			Fq.SageLogo.octspin = 0
			Fq.SageLogo.logospinflag = 0
			Fq.SageLogo.lettertrans = 0
			Fq.SageLogo.yeartimer = 0
			Fq.SageLogo.shapetime = 0
			Fq.SageLogo.texttrans = 0
		}
		
		while (true)
		{
			global.frame_state = 0x04
			waitForNextFrame()

			if (Fq.SageLogo.flashtimer != 0)
			{
				Renderer.drawCustomSprite("sage_logo_blend0", 0, 0, 0x00, SPRITE_FLAG_PRIO, 0xF00F, 0, Fq.SageLogo.flashtimer)
				Renderer.drawCustomSprite("sage_logo_blend1", 0, 0, 0x00, SPRITE_FLAG_PRIO, 0xF00E, 0, Fq.SageLogo.flashtimer)
			}
			
			if (Fq.SageLogo.Screentime >= timemax - 60)
				Fq.SageLogo.octspin += 5
			else
			{
				if (Fq.SageLogo.logospinflag == 0)
				{
					if (Fq.SageLogo.octspin <= 5)
						Fq.SageLogo.logospinflag = 1
					else
						Fq.SageLogo.octspin += 5
				}
				else
				{
					if (Fq.SageLogo.octspin != 250)
						--Fq.SageLogo.octspin	
				}
				if (Fq.SageLogo.lettertrans < 255)
					Fq.SageLogo.lettertrans += 2
				if (Fq.SageLogo.lettertrans > 255)
					Fq.SageLogo.lettertrans = 255
					
				if (Fq.SageLogo.lettertrans >= 230)
					Fq.SageLogo.yeartimer += 5
				if (Fq.SageLogo.yeartimer >= 255)
				{
					if (Fq.SageLogo.texttrans < 255)
						Fq.SageLogo.texttrans += 6
					if (Fq.SageLogo.shapetime < 255)
						Fq.SageLogo.shapetime += 6
						
					if (Fq.SageLogo.shapetime > 255)
						Fq.SageLogo.shapetime = 255
					if (Fq.SageLogo.texttrans > 255)
						Fq.SageLogo.texttrans = 255
				}
			}
			if (Fq.SageLogo.Screentime == 0)
				break
			
			RenderSprites()
			
			// Overwrite two frames with custom widescreen versions
			Renderer.drawCustomSprite("sage_bg", getScreenExtend() - 40, 0, 0x00, SPRITE_FLAG_PRIO, 0xF000)
			
			Renderer.drawCustomSprite("sage_logoparts_oct", basex, basey, 0x00, SPRITE_FLAG_PRIO, 0xF001, Fq.SageLogo.octspin, 255)
			
			Renderer.drawCustomSprite("sage_logoparts_S", basex - 30, basey - 30, 0x00, SPRITE_FLAG_PRIO, 0xF002, 245, Fq.SageLogo.lettertrans)
			Renderer.drawCustomSprite("sage_logoparts_A", basex - 10, basey - 8, 0x00, SPRITE_FLAG_PRIO, 0xF002, 250, Fq.SageLogo.lettertrans)
			Renderer.drawCustomSprite("sage_logoparts_G", basex + 10, basey - 38, 0x00, SPRITE_FLAG_PRIO, 0xF002, 5, Fq.SageLogo.lettertrans)
			Renderer.drawCustomSprite("sage_logoparts_E", basex + 30, basey - 28, 0x00, SPRITE_FLAG_PRIO, 0xF002, 10, Fq.SageLogo.lettertrans)
			
			s64 numbtrans = Fq.SageLogo.yeartimer
			
			{
				u8 counter = 4
				u8 countmax = counter
				while (counter > 0)
				{
					numbtrans -= 25 * (countmax - counter)
					if (numbtrans > 255)
						numbtrans = 255
					if (numbtrans < 0)
						numbtrans = 0
						
					if (counter == 4)
						Renderer.drawCustomSprite("sage_logoparts_2scal", basex + 8, basey, 0x00, SPRITE_FLAG_PRIO, 0xF002, 250, numbtrans)
					else if (counter == 3)
						Renderer.drawCustomSprite("sage_logoparts_0scal", basex + 8 + 8, basey + 8, 0x00, SPRITE_FLAG_PRIO, 0xF002, 15, numbtrans)
					else if (counter == 2)
						Renderer.drawCustomSprite("sage_logoparts_2scal2", basex + 20 + 8, basey + 20, 0x00, SPRITE_FLAG_PRIO, 0xF002, 13, numbtrans)
					else if (counter == 1)
						Renderer.drawCustomSprite("sage_logoparts_1", basex + 32 + 8, basey + 32, 0x00, SPRITE_FLAG_PRIO, 0xF002, 10, numbtrans)
					numbtrans = Fq.SageLogo.yeartimer
					--counter
				}
			}
			Renderer.drawCustomSprite("sage_logoparts_text2", basex - 20, basey + 36, 0x00, SPRITE_FLAG_PRIO, 0xF002, 250, Fq.SageLogo.texttrans)
			
			Renderer.drawCustomSprite("sage_logoparts_shape0", basex + 12, basey + 18, 0x00, SPRITE_FLAG_PRIO, 0xF004, 47, Fq.SageLogo.shapetime)
			Renderer.drawCustomSprite("sage_logoparts_shape1", basex - 51, basey + 2, 0x00, SPRITE_FLAG_PRIO, 0xF004, 8, Fq.SageLogo.shapetime)
			Renderer.drawCustomSprite("sage_logoparts_shape2", basex + 37, basey - 7, 0x00, SPRITE_FLAG_PRIO, 0xF004, 17, Fq.SageLogo.shapetime)
			
			if (Fq.SageLogo.Screentime <= 255) && (Fq.SageLogo.flashtimer < 255)
				Fq.SageLogo.flashtimer++
			--Fq.SageLogo.Screentime
			
			if (control.pad1.pressed & CONTROL_START)
			{
				playMusic(MUSIC_CTRL_STOP)
				if (Fq.SageLogo.Screentime > 25)
					Fq.SageLogo.Screentime = 25
				Fq.SageLogo.flashtimer = 255
			}
		}
		if (Fq.SageLogo.Screentime != 0)
			return

		if (Fq.SageLogo.flashtimer != 0)
		{
			Renderer.drawCustomSprite("sage_logo_blend0", 0, 0, 0x00, SPRITE_FLAG_PRIO, 0xF00F, 0, Fq.SageLogo.flashtimer)
			Renderer.drawCustomSprite("sage_logo_blend1", 0, 0, 0x00, SPRITE_FLAG_PRIO, 0xF00E, 0, Fq.SageLogo.flashtimer)
		}
		
		playMusic(0x25)
	}
	
	u32[0xffffb000] = 0x00482c
	u32[0xffffb04a] = 0x004a5c
	u32[0xffffb0de] = 0x004a1e
	u32[0xffffb128] = 0x004ae4
	u32[0xffffb172] = 0x004b54
	u32[0xffffb1bc] = 0x004bb2
	u32[0xffffb206] = 0x00496a
	titleintro.frames = 0
	
	#if STANDALONE
		//global.whiteflash_timeout = 25
		airHighlightAnimationTimer = 0

		// This is needed for the background to be shown in first frame at all (when VDP sprite rendering seems to be disabled)
		Renderer.resetSprites()
		Renderer.drawCustomSprite("bg_title_screen", getScreenExtend() - 40, 0, 0x00, 0, 0x1100)
	#endif
	
	while (true)
	{
		global.frame_state = 0x04
		waitForNextFrame()
	@EntryPoint:

		UpdateGameObjects()
		RenderSprites()
		LoadRequiredSpritePatterns()

	#if STANDALONE
		// Allow the player to press Start before the logo animation is finished already; only wait for the short white flash to finish
		if (global.whiteflash_timeout > 0)
			continue
	#else
		if (u32[0xffffb094] == 0)
			continue
	#endif

		//if (global.demo_countdown == 0)
		//	break

		if (Fq.SageLogo.flashtimer != 0)
		{
			Renderer.drawCustomSprite("sage_logo_blend0", 0, 0, 0x00, SPRITE_FLAG_PRIO, 0xF00F, 0, Fq.SageLogo.flashtimer)
			Renderer.drawCustomSprite("sage_logo_blend1", 0, 0, 0x00, SPRITE_FLAG_PRIO, 0xF00E, 0, Fq.SageLogo.flashtimer)
			if (Fq.SageLogo.flashtimer > 0)
				Fq.SageLogo.flashtimer -= 12
			if (Fq.SageLogo.flashtimer < 0)
				Fq.SageLogo.flashtimer = 0
		}
			
		if ((control.pad1.pressed | control.player2.pressed) & CONTROL_START)
		{
			global.game_mode = 0x0c
			lives_counter = 3
			u8[0xfffffec6] = 3
			ring_counter = 0
			timer.alldata = 0
			player.score = 0
			u16[0xfffffed0] = 0
			u32[0xfffffed2] = 0
			u32[0xfffffed6] = 0
			continues_counter = 0
			player.next_life_score = 5000
			u32[0xffffffc4] = 5000

			playSound(MUSIC_CTRL_FADEOUT)

		#if STANDALONE
			// In S3AIR, there is no choice, sorry...
			global.game_mode = 0x4c

		#else
			D0 = u8[0xffffff86]
			if (D0.u8 == 0)
			{
				// Data Select
				global.game_mode = 0x4c
			}
			else if (D0.u8 == 1)
			{
				// Competition Mode
				global.game_mode = 0x38
			}
			else
			{
				// Level Select
				global.game_mode = 0x28
			}
		#endif
			return
		}
	}

	/*
	// Start rolling demo
	playSound(MUSIC_CTRL_FADEOUT)

#if STANDALONE
	if (u16[0xffffffd2] == 4)	// Skip FBZ demo for now, as it's not in the game yet
		++u16[0xffffffd2]
	if (u16[0xffffffd2] == 5)	// Skip SOZ demo because it's broken
		++u16[0xffffffd2]
	if (u16[0xffffffd2] == 6)	// Skip Blue Spheres demo because it's also broken
		u16[0xffffffd2] = 0
#endif

	u16[0xffffef7a] = u16[0xffffffd2]
	D0.u16 = (u16[0xffffffd2] & 0x07) * 2
	D0.u16 = u16[0x004344 + D0.s16]
	global.zone_act = D0.u16
	global.zone_act.apparent = D0.u16
	checkpoint.zone_act = D0.u16

	D1.u16 = u16[0xffffffd2] + 1
	if (global.lock_on_state == 0)
	{
		if (D1.u16 == 3)
		{
			D1 = 4
		}
		else if (D1.u16 >= 7)
		{
			D1 = 0
		}
	}
	else
	{
		if (D1.u16 >= 3)
		{
			D1 = 0
		}
	}

	u16[0xffffffd2] = D1.u16
	if (D0.s16 < 0)
	{
		// Blue Spheres rolling demo
		global.game_mode = 0x34
		global.next_bluespheres = 1
		global.sk_bluespheres = 1
		global.zone = 0x07
		u16[0xffffffb0] = 0
		u32[0xffffffb2] = 0
		u16[0xffffffb6] = 0
		u8[0xffffffb8] = 0
		u8[0xffffffb3] = 0x02
	}
	else
	{
		// Normal Game rolling demo
		global.game_mode = 0x08
	}

	global.rolling_demo = 1
	lives_counter = 3
	u8[0xfffffec6] = 3
	ring_counter = 0
	timer.alldata = 0
	player.score = 0
	u16[0xfffffed0] = 0
	u32[0xfffffed2] = 0
	u32[0xfffffed6] = 0
	player.next_life_score = 5000
	u32[0xffffffc4] = 5000
	*/
}

//-------------------------------------------------------//
// Sonic		      	                                 //
//-------------------------------------------------------//

//# address-hook(0x0048dc) end(0x0048fe)
function void fn0048dc()
{
	--objA0.animation.timer
	if (s8(objA0.animation.timer) < 0)
	{
		objA0.animation.timer = 9
		objA0.animation.frame = (objA0.animation.frame + 4) & 0x1c
	}

	u32[0xfffffcda] = u32[0x004904 + objA0.animation.frame]
	DrawObject()

#if STANDALONE
	// Here is a good place to draw the widescreen background
	Renderer.drawCustomSprite("bg_title_screen", getScreenExtend() - 40, 0, 0x00, 0, 0x1100)

	// Also draw the "Angel Island Revisited" text and others
	++airHighlightAnimationTimer
	s16 time = airHighlightAnimationTimer - 80

	u16 px = getScreenWidth() / 2
	u16 py = objA0.position.y.u16 - 53
	//Renderer.drawCustomSprite("title_screen_air", px, py, 0x00, SPRITE_FLAG_PRIO, 0xa000)

	if (time > 0)
	{
		if (time < 65)
		{
			u8 alpha = (time < 20) ? (time * 255 / 20) : ((65 - time) * 255 / 45)
			//Renderer.drawCustomSprite("title_screen_air_h", px, py, 0x00, SPRITE_FLAG_PRIO, 0xa001, 0, alpha)
		}

		Renderer.drawCustomSprite("title_screen_start", getScreenWidth() / 2, 208 + max((50 - time) * 2, 0), 0x00, 0, 0x9f7e)
	}

	Renderer.drawCustomSprite("title_screen_cr", getScreenWidth() - 88, 204, 0x00, 0, 0x9f7e)

	// Clear "Sonic The Hedgehog" text in VRAM
	for (u16 x = 0xb000; x < 0xb700; x += 0x80)
		for (u16 y = 0; y < 0x40; y += 2)
			setVRAM(x + y, 0)
#endif
}
