// Level Transitions

//# address-hook(0x044a26) end(0x044a62)
function void fn044a26()
{
	player1.control_override = 1
	control.player1 = 0x0800
	char.groundspeed = 0x1000
	char.velocity.x = 0x1000

	D0.u16 = u16[0xffffb010] + 0x10
	if (D0.u16 < u16[A0 + 0x30])
		return

	player1.control_override = 0
	player2.control_override = 0
	UnloadObject()
}

//# address-hook(0x085e3a) end(0x085e50)
function void TriggerNextZone()
{
#if STANDALONE
	Standalone.onLevelFinished()
	D0.u16 = Game.onTriggerNextZone(D0.u16)

	// Decide on the next zone's start location -- either the default or an alternative one
	//  - 0 is the default
	//  - 1 is Sonic's and Tails' path
	//  - 2 is Knuckles's path
	level.start_location = 0
	if (D0.u16 == 0x0300)
	{
		// MGZ -> CNZ
		level.start_location = (camera.position.y.u16 < 0x0600) ? 2 : 2
	}
	else if (D0.u16 == 0x0500)
	{
		// CNZ -> ICZ
		level.start_location = (camera.position.y.u16 > 0x0300) ? 1 : 1
	}

	if (Game.getSetting(SETTING_MAINTAIN_SHIELDS))
	{
		global.shields_backup_1 = u8[0xffffb02b] & 0x71
	}
#endif

	// Trigger the fade out and loading of next zone
	global.zone_act = D0.u16
	global.zone_act.apparent = D0.u16
	level.restart = 1
	checkpoint.number = 0
	global.stage_type = 0

#if STANDALONE
	Standalone.onLevelStart()
#endif
}

//# address-hook(0x085e3a) end(0x085e50)
function void TriggerNextZone()
{
#if STANDALONE
	Standalone.onLevelFinished()
	D0.u16 = Game.onTriggerNextZone(D0.u16)

	// Decide on the next zone's start location -- either the default or an alternative one
	//  - 0 is the default
	//  - 1 is Sonic's and Tails' path
	//  - 2 is Knuckles's path
	level.start_location = 0
	if (D0.u16 == 0x0300)
	{
		// MGZ -> CNZ
		level.start_location = 2
	}
	else if (D0.u16 == 0x0500)
	{
		// CNZ -> ICZ
		level.start_location = 1
	}

	if (Game.getSetting(SETTING_MAINTAIN_SHIELDS))
	{
		global.shields_backup_1 = u8[0xffffb02b] & 0x71
	}
#endif

	// Trigger the fade out and loading of next zone
	global.zone_act = D0.u16
	global.zone_act.apparent = D0.u16
	level.restart = 1
	checkpoint.number = 0
	global.stage_type = 0

#if STANDALONE
	Standalone.onLevelStart()
#endif
}

//# address-hook(0x01be46) end(0x01bfae)
function void SetupCharacterAtStartPosition()
{
	bool fuckyou = false
	if (global.zone_act == 0x0000) && (checkpoint.number == 1)
		fuckyou = true
	if (checkpoint.number != 0) && (!fuckyou)
	{
		SetupCharacterAtLastCheckpoint()
		D1.u16 = u16[0xffffb010]
		D0.u16 = u16[0xffffb014]
	}
	else
	{
		A1 = isMainCharacter(CHARACTER_KNUCKLES) ? 0x1e3cd8 : 0x1e3c18
		A1 += global.zone * 8 + global.act * 4
		D1 = u16[A1]
		D0 = u16[A1+2]
		u16[0xffffb010] = D1.u16
		u16[0xffffb014] = D0.u16

		if (global.zone_act == 0x0000)
		{
			if (isSonicIntro())
			{
				D1.u16 = 0
				D0.u16 = 0x420
				u16[0xffffb010] = 0x0040
				u16[0xffffb014] = 0x0420
				move_area.left = 0
				u16[0xffffee0c] = 0
				u16[0xffffee1c] = 0
			}
		#if STANDALONE
			else if (isMainCharacter(CHARACTER_KNUCKLES) && (Game.getSetting(SETTING_AIZ_INTRO_KNUCKLES) != 0 || Game.isTimeAttack()))
			{
				// First set the desired camera position, then character position gets calculated after the if-else-blocks
				//  -> Camera positions here should be the same as in "fn0634ca"
				if (Game.getSetting(SETTING_LEVELLAYOUTS) == 2)
				{
					u16[0xffffb010] = 0x1830
					u16[0xffffb014] = 0x0119
					D1.u16 = 0x1768
					D0.u16 = 0x0090
					move_area.bottom.current = D0.u16
					move_area.bottom.target = D0.u16
				}
				else
				{
					D1.u16 = 0x1390
					D0.u16 = 0x0380
				}
				D1.u16 += getScreenWidth() / 2
				D0.u16 += 96
			}
			else //if (!isMainCharacter(CHARACTER_KNUCKLES))
			{
				u16[0xffffb000 + 0x46] = 0xc0d
				checkpoint.number = 1
				// whoever originally made the aiz 1 jump in code, fuck you
				u8[0xffffb000 + 0x20] = char.state.ROLLING
				u8[0xffffb000 + 0x2a] |= char.flag.IN_AIR
				s16[0xffffb000 + 0x18] = 0x600
				s16[0xffffb000 + 0x1a] = -0x400
				// this doesn't work for tails, do i care? not in particular
				// someone will fix it later... probably
			}
		#endif
		}
		else if (global.zone_act == 0x0300)
		{
			level.start_location = 2
		}
		else if (global.zone_act == 0x0500)
		{
			level.start_location = 1
		}
	#if STANDALONE
		else if (global.zone_act == 0x0600)
		{
			D0.u16 -= 0xa0
			u16[0xffffb014] -= 0xa0
			
			if (isMainCharacter(CHARACTER_KNUCKLES))	//Move Knuckles up a bit to make him go on his own path.
			{
				D0.u16 -= 0x280
				u16[0xffffb014] -= 0x280
			}
			else if (isMainCharacter(CHARACTER_TAILS))	//Also Tails, but UNO reverse card it.
			{
				D0.u16 += 0x280
				u16[0xffffb014] += 0x280
			}
		}
		else if (global.zone_act == 0x0601)
		{
			if (isMainCharacter(CHARACTER_KNUCKLES) && getNumPlayers() == 2)
			{
				// Move Knuckles a bit to the right in LBZ 2 to make space for Tails
				u16[0xffffb010] += 0x10
				D1.u16 += 0x10
			}
		}
	#endif
		else if (global.zone_act == 0x0700)
		{
			if (!isMainCharacter(CHARACTER_KNUCKLES) && global.lock_on_state == 0)
			{
				move_area.left  = 0x00c0
				u16[0xffffee0c] = 0x00c0
				u16[0xffffee1c] = 0x00c0
				D1.u16 = 0x0160
			}
		}
		else if (global.zone_act == 0x0900)
		{
			if (isMainCharacter(CHARACTER_KNUCKLES))
			{
				D1.u16 += 0xb0
			}
		}
		else if (global.zone_act == 0x0b00 || global.zone_act == 0x1601)
		{
			D1.u16 += 0xb0 + getScreenExtend()
		}
	#if STANDALONE
		else if (global.zone == 0x13)
		{
			// Gumball Machine:
			// Do not allow for jumping in first frame
			u8[0xffffb000 + 0x20] = char.state.STANDING
			u8[0xffffb000 + 0x2a] |= char.flag.IN_AIR
			u8[0xffffb04a + 0x20] = char.state.STANDING
			u8[0xffffb04a + 0x2a] |= char.flag.IN_AIR
		}
		else if (global.zone == 0x15)
		{
			// Slot Machine
			D1.u16 -= getScreenExtend()
		}
	#endif
	}

	D1.s16 = max(D1.s16 - getScreenWidth() / 2, 0)
	if (competition_mode.active == 0)
	{
	#if STANDALONE
		// Avoid exact tile edges
		//  -> This was particularly added in to avoid glitches in first pixel row after exiting first Giant Ring in AIZ 2
		//     (There's probably a better solution, that generally solves this type of glitches when going left in AIZ 2)
		if ((D1.u16 & 0x0f) == 0)
			++D1.u16
	#endif
		D1.u16 = min(D1.u16, move_area.right)
	}

	camera.position.x.u16 = D1.u16
	u16[0xffffee60] = D1.u16

	D0.s16 = clamp(D0.s16 - 96, 0, s16(move_area.bottom.current))
	camera.position.y.u16 = D0.u16
	u16[0xffffee64] = D0.u16
}

//# address-hook(0x053608) end(0x05365e)
function void InitLevelTiles.ICZ1()
{
	level.height.bitmask = 0x07ff
	level.height.tilemask = 0x07f0
	level.chunksize.bitmask = 0x3c
	Level.GetCameraPosition()
	Level.InitialTilesFill()
}

//# address-hook(0x03943a) end(0x039470)
function void fn03943a()
{
	// This state is only used before touching the ground with the snowboard for the first time

	A1 = 0xffffb000
	objA1.state = char.state.RUNNING 
	objA0.position.x.u16 = objA1.position.x.u16
	objA0.position.y.u16 = objA1.position.y.u16
	if ((u8[A1 + 0x2a] & char.flag.IN_AIR) == 0)
	{
		objA0.state = 1
		objA0.update_address = 0x0394a0
	}

	Object.animationUpdate(0x039476)
	fn03968e()
	DrawObject()
}

//# address-hook(0x0067ee) end(0x0069b6)
function void fn0067ee()
{
	u32[0xffffb094] = 0x006c2c
	InitializeGameCharacters()
	RestoreShield()
	if (checkpoint.number != 0 || global.stage_type != 0)
		return

	A1 = 0xffffb000
	A2 = 0xffffb04a
	if (global.zone_act == 0x0000)
	{
		// Angel Island Zone
		if (isSonicIntro())
		{
			// Trigger intro
			u32[0xffffb172] = 0x067472
			global.level_started = 0
		}
	#if STANDALONE
		else if (isMainCharacter(CHARACTER_KNUCKLES) && Game.getSetting(SETTING_AIZ_INTRO_KNUCKLES) != 0 && !Game.isTimeAttack())
		{
			u32[0xffffb172] = 0x063446
		}
	#endif
	}
	else if (global.zone_act == 0x0100)
	{
		// Hydrocity Zone
		objA1.state = char.state.FALLING_PANIC
		if (global.characters == CHARS_KNUCKLES_ALONE)
		{
			u16[A1 + 0x20] = 0x2121
			u8[A1 + 0x23] = 1
			objA1.animation.timer = 0	// This is A0 instead of A1 in original, thanks to Clownacy (https://forums.sonicretro.org/index.php?showtopic=30778&view=findpost&p=893997)
		}
		objA1.flags2a |= char.flag.IN_AIR
		if (global.characters == CHARS_TAILS_ALONE)
		{
			u8[A1 + 0x40] = 0x01
		}
		if (u32[A2] != 0)
		{
			u8[A2 + 0x20] = char.state.FALLING_PANIC
			u8[A2 + 0x2a] |= char.flag.IN_AIR
			u8[A2 + 0x40] = 0x01
		}
	}
	else if (global.zone_act == 0x0200)
	{
		// Marble Garden Zone
		objA1.state = char.state.FALLING_PANIC
		objA1.flags2a |= char.flag.IN_AIR
		if (u32[A2] != 0)
		{
			u8[A2 + 0x20] = char.state.FALLING_PANIC
			u8[A2 + 0x2a] |= char.flag.IN_AIR
		}
	}
	else if (global.zone_act == 0x0300)
	{
		// Carnival Night Zone
		bool spawnAITails = (global.characters == CHARS_SONIC_ALONE)	// Excluding Sonic & Tails
	#if STANDALONE
		if (level.start_location == 1 && isMainCharacter(CHARACTER_KNUCKLES))
		{
			spawnAITails = true
		}
	#endif
		if (spawnAITails)
		{
			u32[0xffffb04a] = 0x01365c
			u16[0xffffb05a] = u16[0xffffb010]
			u16[0xffffb05e] = u16[0xffffb014]
			tails.ai_routine = 0
		}
		else if (isMainCharacter(CHARACTER_TAILS))
		{
			tails.ai_routine = 0x20
		}
		else if (isMainCharacter(CHARACTER_KNUCKLES))
		{
			u32[0xffffb172] = 0x044a0c
		}
	}
	else if (global.zone_act == 0x0500)
	{
		// IceCap Zone
		if (isMainCharacter(CHARACTER_SONIC))
		{
			u32[0xffffb172] = 0x0396e4
		}
		else if (isMainCharacter(CHARACTER_TAILS))
		{
			// u32[0xffffb172] = 0x039b66 // changed this to make the snowboard load for Tails
			u32[0xffffb172] = 0x0396e4
		}
	#if STANDALONE
		else if (isMainCharacter(CHARACTER_KNUCKLES))
		{
u32[0xffffb172] = 0x0396e4
		}
	#endif
	}
	else if (global.zone_act == 0x0600)
	{
		// Launch Base Zone
		u32[0xffffb172] = 0x039a40
	}
	else if (global.zone_act == 0x0700)
	{
		// Mushroom Hill Zone
		if (isMainCharacter(CHARACTER_KNUCKLES))
		{
			objA1.state = char.state.FALLING_PANIC
			objA1.flags2a |= char.flag.IN_AIR
		}
		else if (global.lock_on_state == 0)
		{
			// Add Tails
			if (global.characters == CHARS_SONIC_ALONE)
			{
				u32[0xffffb04a] = 0x01365c
				u16[0xffffb05a] = u16[0xffffb010]
				u16[0xffffb05e] = u16[0xffffb014]
				tails.ai_routine = 0
			}
			else if (isMainCharacter(CHARACTER_TAILS))
			{
				tails.ai_routine = 0x20
			}
		}
	}
	else if (global.zone_act == 0x0800)
	{
		// Sandopolis Zone
		u32[0xffffb172] = 0x041fee
		objA1.state = char.state.ROLLING
		objA1.flags2a |= char.flag.IN_AIR
		if (u32[A2] != 0)
		{
			u8[A2 + 0x20] = char.state.ROLLING
			u8[A2 + 0x2a] |= char.flag.IN_AIR
		}
	}
	else if (global.zone_act == 0x0900)
	{
		// Lava Reef Zone
		if (global.characters != CHARS_KNUCKLES_ALONE)
		{
			objA1.state = char.state.FALLING_PANIC
			objA1.flags2a |= char.flag.IN_AIR
			if (u32[A2] != 0)
			{
				u8[A2 + 0x20] = char.state.FALLING_PANIC
				u8[A2 + 0x2a] |= char.flag.IN_AIR
			}
		}
		else
		{
			u32[0xffffb172] = 0x044a0c
		}
	}
	else if (global.zone_act == 0x0b00)
	{
		// Death Egg Zone
		u32[0xffffb172] = 0x044a0c
	}
	else if (global.zone_act == 0x1600)
	{
		// Lava Reef boss act
		objA1.state = char.state.FALLING_PANIC
		objA1.flags2a |= char.flag.IN_AIR
		if (u32[A2] != 0)
		{
			u8[A2 + 0x20] = char.state.FALLING_PANIC
			u8[A2 + 0x2a] |= char.flag.IN_AIR
		}
	}
	else if (global.zone_act == 0x1601)
	{
		// Hidden Palace Zone
		u32[0xffffb172] = 0x044a0c
	}
}

//# address-hook(0x0394a0) end(0x0394f0)
function void fn0394a0()
{
	// Main state while snowboarding (except for curves)

	A1 = 0xffffb000
	objA1.state = char.state.RUNNING 
	objA0.position.x.u16 = u16[A2 + 0x10]
	objA0.position.y.u16 = u16[A2 + 0x14]

	D0 = u8[A2 + 0x26] + 5
	D0.u16 >>= 4
	objA0.state = u8[0x0394f2 + D0.s16]
	if ((u8[A2 + 0x2a] & char.flag.IN_AIR) == 0)
	{
		// Touching ground
		fn039502()
	}
	else
	{
		// In air
	#if STANDALONE
		// Prevent insta-shield and drop dash, by resetting "char.jumping"
		u8[A2 + 0x40] = 0
	#endif

		objA0.state = 0
		if (s16[A2 + 0x18] >= 0x1000)
			s16[A2 + 0x18] = 0x1000
		if (s16[A2 + 0x1a] < -0x200)
			s16[A2 + 0x1a] = -0x200

		fn039554()
	}

#if STANDALONE
	// Update achievement
	if (ring_counter >= 50)
	{
		Game.setAchievementComplete(ACHIEVEMENT_ICZ_SNOWBOARDING)
	}
#endif
}

//# address-hook(0x039a40) end(0x039a7e)
function void fn039a40()
{
	UnloadObject()
}
