//# address-hook(0x00076e) end(0x00077e)
function void fn00076e()
{
	//Nothing
}

global u8 SegaLogoFade
global u8 SegaLogoCanMove

global u8 segahasplayed//# address-hook(0x00076e) end(0x00077e)
function void fn00076e()
{
	//Nothing
}

global u8 SegaLogoFade
global u8 SegaLogoCanMove

global u8 segahasplayed
global u8 cesatrans
//global bool segahasbeencancelledgohome

//# address-hook(0x000780) end(0x0007b4)
function void fn000780()
{
	if (segahasplayed == 0)
	{
		if (cesatrans < 255)
		{
			cesatrans += 15 
			//You can change this to change the speed that the thing comes in, but make sure that it never goes above 256. I could solve this by making it a u16, but I could also not fix and just leave it as it is.
		}
		else
		{
			cesatrans = 255
		}
		Renderer.drawCustomSprite("splash_screen_warning", getScreenExtend() - 40, 0, 0x00, 0, 0xffff)
		Renderer.resetSprites()

	}
	else
	{
		--segahasplayed
	}
}


//# address-hook(0x0043d4) end(0x0043fe)
function void fn0043d4()
{
	if (titleintro.frames == 1)
	{
		D0.s16 = s8[0x004400 + titleintro.animstep]
		if (D0.s16 < 0)
		{
			// White screen
			titleintro.animstep = 12
		#if STANDALONE
			titleintro.frames = 40
		#else
			titleintro.frames = 3
		#endif
		}
		else
		{
			fn00440c()
			++titleintro.animstep
		}
	}
}


//# address-hook(0x00440c) end(0x0044fe)
function void fn00440c()
{
	D7.u16 = D0.u16
	A2 = 0x004500 + D0.s16 * 12
	D3.u16 = 0x2c60
	D0 = u32[A2]
	A2 += 4

	if (D7.u16 >= 7)
	{
		if (D7.u16 > 7)
		{
			Kosinski.decompress(D0 & 0x00ffffff, 0xffff0000)
			D3.u16 = A1.u16 >> 1
		}

		u16 targetInVRAM = (u8[0xffffffbc] == 0) ? 0 : 0x6000
		updateSpritePattern(0xffff0000, targetInVRAM, D3.u16)
	}

	A0 = u32[A2]
	A2 += 4
	copyMemory(0xfffffc80, A0, 0x40)

	A1 = 0xffff8000
	A0 = u32[A2]
	A2 += 4
	if (u8[0xffffffbc] == 0)
	{
		D0.u16 = 0
		Enigma.Decompress()
		if (D7.u16 < 7 && (global.region_code & 0x80) == 0)
		{
			u32[0xffff83ac] = 0
		}

		set_status_register(0x2700)
		copyRectToVRAM(0xffff8000, 0xc000, 0x28, 0x1c)
		set_status_register(0x2300)
	}
	else
	{
		D0.u16 = (D7.u16 < 7) ? 0 : 0x0300
		Enigma.Decompress()
		if (D7.u16 < 7 && (global.region_code & 0x80) == 0)
		{
			D0 = 0
			u32[0xffff83ac] = D0
		}

		set_status_register(0x2700)
		copyRectToVRAM(0xffff8000, 0xe000, 0x28, 0x1c)
		set_status_register(0x2300)
	}
}

//# address-hook(0x003e32) end(0x004342)
function void TitleScreen()
{
SegaLogoFade = 0
SegaLogoCanMove = 0

	playMusic(MUSIC_CTRL_FADEOUT)
	kosinski.queue_size = 0

	zeroMemory(0xffffff10, 0x6c)

	ClearPatternLoadingQueue()
	global.zone_act = 0
	FadeOutScreenBlocking()
	set_status_register(0x2700)

	VDP.Config.enableHInt(false)
	VDP.Config.setNameTableBasePlaneA(0xc000)
	VDP.Config.setNameTableBasePlaneB(0xe000)
	VDP.Config.setPlayfieldSizeInPixels(512, 256)
	VDP.Config.setupWindowPlane(false, 0)			// Disable window plane
	VDP.Config.setVerticalScrolling(false, 0xff)	// Good old horizontal scrolling mode
	VDP.Config.setBackdropColor(0)
	VDP.Config.setRenderingModeConfiguration(false)

	water.fullscreen = 0
	level.water_present = 0

	fn0011ca()

	zeroMemory(0xffffac00, 0x400)
	zeroMemory(0xffffb000, 0x2000)
	zeroMemory(0xfffff700, 0x100)
	zeroMemory(0xffffee00, 0x100)

#if STANDALONE
	Renderer.resetSprites()

	// Move planes a bit to the right
	for (u8 i = 0; i < getScreenHeight(); ++i)
		u32[0xffffe000 + i*4] = getScreenExtend() * 0x10001
#endif

	fn01aa6e()

	zeroMemory(0xfffffc00, 0x100)

	checkpoint.number = 0
	global.stage_type = 0
	debug_mode.state = 0
	global.rolling_demo = 0
	u16[0xfffff634] = 0
	competition_mode.active = 0
	global.level_started = 0
	debug_mode.enabled.u8 = 0
	competition_mode.active = 0
	u16[0xffffffe4] = 0
	u16[0xffffffe6] = 0
	bluespheres.minigame_mode = 0
	global.demo_countdown = 359		// 6 seconds (minus one frame)
	u16[0xfffffb00] = 0
	u32[0xfffffbfc] = 0xfffffb00

	Kosinski.decompress(0x350d26, 0xffff0000)	// After this, A1 points to where uncompressed data ends
	updateSpritePattern(0xffff0000, 0x0000, A1.u16 >> 1)

	Enigma.decompress(0x34f6a0, 0xffff8000, 0x0000)
	if ((global.region_code & 0x80) == 0)
	{
		u32[0xffff83ac] = 0
	}
	copyRectToVRAM(0xffff8000, 0xc000, 0x28, 0x1c)

	copyMemory(0xfffffc80, 0x00460c, 0x20)

	global.demo_countdown = 240		// 4 seconds
	VDP.Config.setActiveDisplay(true)
	Menu.FadeInAfterInit()

#if STANDALONE
	// Stop any music that might be playing or restarting (this can happen after aborting a rolling demo)
	playMusic(MUSIC_CTRL_STOP)
#endif
	playSound(0xa1)
	segahasplayed = 200
	cesatrans = 0

	global.demo_countdown = 180		// 3 seconds
	while (global.demo_countdown != 0)
	{
		global.frame_state = 0x14
		waitForNextFrame()
	@EntryPoint_003fd2:
	if (segahasplayed == 0)
	{
		if (control.pad1.pressed & CONTROL_START)
			break
	}

	#if STANDALONE
		Renderer.resetSprites()
		if (segahasplayed != 0) //Could also solve this by putting the fire stuff on a higher renderQueue
		{
			SegaLogoCanMove = 1
			if (SegaLogoFade != 255)
			{
				SegaLogoFade++
			}
			D0.u8 = (global.framecounter.low & 0xFF)
			Renderer.drawCustomSprite("splash_screen_sega_white", getScreenWidth() / 2 - 200, 0, 0x00, 0, 0x2000, 0, SegaLogoFade)
			if (SegaLogoCanMove == 1)
			{
			Renderer.drawCustomSprite("splash_screen_sega_red", getScreenWidth() / 2 - 200 + D0.u8 / 8, 0, 0x00, 0, 0x2000, 0, SegaLogoFade / 2)
			Renderer.drawCustomSprite("splash_screen_sega_orange", getScreenWidth() / 2 - 200 - D0.u8 / 8, 0, 0x00, 0, 0x2000, 0, SegaLogoFade / 2)
			}
			Renderer.drawCustomSprite("splash_screen_black_bg", getScreenWidth() / 2 - 200, 0, 0x00, 0, 0x2000, 0, 255)
		}
	#endif
	}

#if !STANDALONE
	playMusic(0xfe)
#endif

	// While loop: SEGA logo background fade from white to black
	A1 = 0x00459c
	while (true)
	{
		break
		global.frame_state = 0x02
		waitForNextFrame()

		copyMemory(0xfffffc00, A1, 0x0e)
		if (u16[A1] == 0)
			break

		A1 += 0x0e

	#if STANDALONE
		Renderer.resetSprites()
		if (u8[0xfffffc01] & 0x0e)
		{
			if (segahasplayed != 0) //Could also solve this by putting the fire stuff on a higher renderQueue
			{
				Renderer.drawCustomSprite("splash_screen_black_bg", getScreenWidth() / 2 - 200, 0, 0x00, 0, 0x2000, 0, 255)
			}
		}
	#endif
	}

	outro.wait_time = 0
	u16[0xfffff662] = 0
	u8[0xffffffbc] = 0xff
	titleintro.frames = 0
	titleintro.animstep = 1
	D0 = 1
	fn00440c()

	global.demo_countdown = (global.region_code & 0x40) ? 750 : 900
#if STANDALONE
	// Slightly increase the wait time until demo starts
	global.demo_countdown += 99999999999
#endif

	Kosinski.addToDecompressionQueue(0x351c86, 0xffff0000)

	// While loop: Intro sequence with Sonic running towards the camera
	while (true)
	{
		global.frame_state = 0x04
		Kosinski.ProcessDecompressionQueue()

		waitForNextFrame()

	#if STANDALONE
		// Overwrite two frames with custom widescreen versions
		if (titleintro.animstep == 7)
		{
			Renderer.drawCustomSprite("splash_screen_black_bg", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 8)
		{
			Renderer.drawCustomSprite("splash_screen_black_bg", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 6)
		{
			Renderer.drawCustomSprite("splash_screen_black_bg", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 5)
		{
			Renderer.drawCustomSprite("splash_screen_black_bg", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 4)
		{
			Renderer.drawCustomSprite("splash_screen_black_bg", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 3)
		{
			Renderer.drawCustomSprite("splash_screen_black_bg", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 2)
		{
			Renderer.drawCustomSprite("splash_screen_black_bg", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 1)
		{
			Renderer.drawCustomSprite("splash_screen_black_bg", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 9)
		{
			Renderer.drawCustomSprite("splash_screen_transition_1", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 10)
		{
			Renderer.drawCustomSprite("splash_screen_transition_2", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 11)
		{
			Renderer.drawCustomSprite("splash_screen_transition_3", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 12)
		{
			Renderer.drawCustomSprite("splash_screen_white_bg", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
	#endif

		fn0043d4()
		UpdateGameObjects()
		RenderSprites()
		LoadRequiredSpritePatterns()

		if (titleintro.animstep >= 12)
			break
	}

	// White screen
	titleintro.animstep = 12
	fillMemory_u16(0xfffffc00, 0x80, 0x0eee)

#if STANDALONE
	titleintro.frames = 15
	global.frame_state = 0x04
	for (u8 k = 0; k < titleintro.frames; ++k)
	{
		waitForNextFrame()
	}

	// This is to make sure screen stays white in the next frame even if skipping the intro
	VDP.Config.setActiveDisplay(false)
#else
	titleintro.frames = 3
	global.frame_state = 0x04
	waitForNextFrame()
#endif

	// Fill the planes with decompressed screen content
	Kosinski.decompress(0x359fc6, 0xffff0000)	// After this, A1 points to where uncompressed data ends
	updateSpritePattern(0xffff0000, 0x0000, A1.u16 >> 1)

	Enigma.decompress(0x350018, 0xffff8000, 0x8000)
	copyRectToVRAM(0xffff8000, 0xc000, 0x28, 0x1c)

	Enigma.decompress(0x350112, 0xffff8000, 0x4000)
	copyRectToVRAM(0xffff8000, 0xe000, 0x28, 0x1c)

	global.frame_state = 0x04
	waitForNextFrame()

#if STANDALONE
	VDP.Config.setActiveDisplay(true)
#endif

	copyMemory(0xfffffc80, 0x0047ac, 0x80)

	// Load patterns used in title screen
	{
		// Large banner
		Nemesis.loadDataToVRAM(0x35026c, 0xa000)

		// Menu options
		Nemesis.loadDataToVRAM(0x004d2a, 0xd000)

		// Wiggling finger, twinkle, Tails & Tornado in BG
		Nemesis.loadDataToVRAM(0x2c49cc, 0x8000)

		// "& Knuckles"
		Nemesis.loadDataToVRAM(0x0d6498, 0x9800)
	}

	u32[0xffffb000] = 0x00482c
	u32[0xffffb04a] = 0x004a5c
	u32[0xffffb0de] = 0x004a1e
	u32[0xffffb128] = 0x004ae4
	u32[0xffffb172] = 0x004b54
	u32[0xffffb1bc] = 0x004bb2
	u32[0xffffb206] = 0x00496a
	titleintro.frames = 0

	#if STANDALONE
		global.whiteflash_timeout = 30
		airHighlightAnimationTimer = 0

		// This is needed for the background to be shown in first frame at all (when VDP sprite rendering seems to be disabled)
		Renderer.resetSprites()
	Renderer.drawCustomSprite("splash_screen_white_bg", getScreenExtend() - 40, 0, 0x00, 0, 0xffff)
	#endif

	while (true)
	{
		global.frame_state = 0x04
		waitForNextFrame()
	@EntryPoint:

		UpdateGameObjects()
		RenderSprites()
		LoadRequiredSpritePatterns()

	#if STANDALONE
		// Allow the player to press Start before the logo animation is finished already; only wait for the short white flash to finish
		if (global.whiteflash_timeout > 0)
			continue
	#else
		if (u32[0xffffb094] == 0)
			continue
	#endif

		if (global.demo_countdown == 0)
			break

		if ((control.pad1.pressed | control.player2.pressed) & CONTROL_START)
		{
			global.game_mode = 0x0c
			lives_counter = 3
			u8[0xfffffec6] = 3
			ring_counter = 0
			timer.alldata = 0
			player.score = 0
			u16[0xfffffed0] = 0
			u32[0xfffffed2] = 0
			u32[0xfffffed6] = 0
			continues_counter = 0
			player.next_life_score = 5000
			u32[0xffffffc4] = 5000

			playSound(MUSIC_CTRL_FADEOUT)

		#if STANDALONE
			// In S3AIR, there is no choice, sorry...
			global.game_mode = 0x4c

		#else
			D0 = u8[0xffffff86]
			if (D0.u8 == 0)
			{
				// Data Select
				global.game_mode = 0x4c
			}
			else if (D0.u8 == 1)
			{
				// Competition Mode
				global.game_mode = 0x38
			}
			else
			{
				// Level Select
				global.game_mode = 0x28
			}
		#endif
			return
		}
	}

	// Start rolling demo
	playSound(MUSIC_CTRL_FADEOUT)

#if STANDALONE
	if (u16[0xffffffd2] == 4)	// Skip FBZ demo for now, as it's not in the game yet
		++u16[0xffffffd2]
	if (u16[0xffffffd2] == 5)	// Skip SOZ demo because it's broken
		++u16[0xffffffd2]
	if (u16[0xffffffd2] == 6)	// Skip Blue Spheres demo because it's also broken
		u16[0xffffffd2] = 0
#endif

	u16[0xffffef7a] = u16[0xffffffd2]
	D0.u16 = (u16[0xffffffd2] & 0x07) * 2
	D0.u16 = u16[0x004344 + D0.s16]
	global.zone_act = D0.u16
	global.zone_act.apparent = D0.u16
	checkpoint.zone_act = D0.u16

	D1.u16 = u16[0xffffffd2] + 1
	if (global.lock_on_state == 0)
	{
		if (D1.u16 == 3)
		{
			D1 = 4
		}
		else if (D1.u16 >= 7)
		{
			D1 = 0
		}
	}
	else
	{
		if (D1.u16 >= 3)
		{
			D1 = 0
		}
	}

	u16[0xffffffd2] = D1.u16
	if (D0.s16 < 0)
	{
		// Blue Spheres rolling demo
		global.game_mode = 0x34
		global.next_bluespheres = 1
		global.sk_bluespheres = 1
		global.zone = 0x07
		u16[0xffffffb0] = 0
		u32[0xffffffb2] = 0
		u16[0xffffffb6] = 0
		u8[0xffffffb8] = 0
		u8[0xffffffb3] = 0x02
	}
	else
	{
		// Normal Game rolling demo
		global.game_mode = 0x08
	}

	global.rolling_demo = 1
	lives_counter = 3
	u8[0xfffffec6] = 3
	ring_counter = 0
	timer.alldata = 0
	player.score = 0
	u16[0xfffffed0] = 0
	u32[0xfffffed2] = 0
	u32[0xfffffed6] = 0
	player.next_life_score = 5000
	u32[0xffffffc4] = 5000
}

//# address-hook(0x0048dc) end(0x0048fe)
function void fn0048dc()
{
	--objA0.animation.timer
	if (s8(objA0.animation.timer) < 0)
	{
		objA0.animation.timer = 9
		objA0.animation.frame = (objA0.animation.frame + 4) & 0x1c
	}

	u32[0xfffffcda] = u32[0x004904 + objA0.animation.frame]
	DrawObject()

#if STANDALONE

	// Also draw the "Angel Island Revisited" text and others
	++airHighlightAnimationTimer
	s16 time = airHighlightAnimationTimer - 80

	u16 px = getScreenWidth() / 2
	u16 py = objA0.position.y.u16 - 53
	Renderer.drawCustomSprite("title_screen_logo", px, py, 0x00, SPRITE_FLAG_PRIO, 0xdfff)

	if (time > 0)
	{
		if (time < 65)
		{
			u8 alpha = (time < 20) ? (time * 255 / 20) : ((65 - time) * 255 / 45)
			Renderer.drawCustomSprite("title_screen_logo_flash", px, py, 0x00, SPRITE_FLAG_PRIO, 0xefff, 0, alpha)
		}

		Renderer.drawCustomSprite("title_screen_press_start", getScreenWidth() / 2, 208 + max((50 - time) * 2, 0), 0x00, 0, 0xffff)
	}

	Renderer.drawCustomSprite("title_screen_logo_embed", getScreenWidth() - 88, 204, 0x00, 0, 0xffff)

	// Here is a good place to draw the widescreen background
	Renderer.drawCustomSprite("splash_screen_white_bg", getScreenExtend() - 40, 0, 0x00, 0, 0xcfff)

	// Clear "Sonic The Hedgehog" text in VRAM
	for (u16 x = 0xb000; x < 0xb700; x += 0x80)
		for (u16 y = 0; y < 0x40; y += 2)
			setVRAM(x + y, 0)
#endif
}
global u8 cesatrans
//global bool segahasbeencancelledgohome

//# address-hook(0x000780) end(0x0007b4)
function void fn000780()
{
	if (segahasplayed == 0)
	{
		if (cesatrans < 255)
		{
			cesatrans += 15 
			//You can change this to change the speed that the thing comes in, but make sure that it never goes above 256. I could solve this by making it a u16, but I could also not fix and just leave it as it is.
		}
		else
		{
			cesatrans = 255
		}
Renderer.drawCustomSprite("splash_screen_warning", getScreenExtend() - 40, 0, 0x00, 0, 0xffff)
		Renderer.resetSprites()

	}
	else
	{
		--segahasplayed
	}
}


//# address-hook(0x0043d4) end(0x0043fe)
function void fn0043d4()
{
	if (titleintro.frames == 1)
	{
		D0.s16 = s8[0x004400 + titleintro.animstep]
		if (D0.s16 < 0)
		{
			// White screen
			titleintro.animstep = 12
		#if STANDALONE
			titleintro.frames = 40
		#else
			titleintro.frames = 3
		#endif
		}
		else
		{
			fn00440c()
			++titleintro.animstep
		}
	}
}


//# address-hook(0x00440c) end(0x0044fe)
function void fn00440c()
{
	D7.u16 = D0.u16
	A2 = 0x004500 + D0.s16 * 12
	D3.u16 = 0x2c60
	D0 = u32[A2]
	A2 += 4

	if (D7.u16 >= 7)
	{
		if (D7.u16 > 7)
		{
			Kosinski.decompress(D0 & 0x00ffffff, 0xffff0000)
			D3.u16 = A1.u16 >> 1
		}

		u16 targetInVRAM = (u8[0xffffffbc] == 0) ? 0 : 0x6000
		updateSpritePattern(0xffff0000, targetInVRAM, D3.u16)
	}

	A0 = u32[A2]
	A2 += 4
	copyMemory(0xfffffc80, A0, 0x40)

	A1 = 0xffff8000
	A0 = u32[A2]
	A2 += 4
	if (u8[0xffffffbc] == 0)
	{
		D0.u16 = 0
		Enigma.Decompress()
		if (D7.u16 < 7 && (global.region_code & 0x80) == 0)
		{
			u32[0xffff83ac] = 0
		}

		set_status_register(0x2700)
		copyRectToVRAM(0xffff8000, 0xc000, 0x28, 0x1c)
		set_status_register(0x2300)
	}
	else
	{
		D0.u16 = (D7.u16 < 7) ? 0 : 0x0300
		Enigma.Decompress()
		if (D7.u16 < 7 && (global.region_code & 0x80) == 0)
		{
			D0 = 0
			u32[0xffff83ac] = D0
		}

		set_status_register(0x2700)
		copyRectToVRAM(0xffff8000, 0xe000, 0x28, 0x1c)
		set_status_register(0x2300)
	}
}

//# address-hook(0x003e32) end(0x004342)
function void TitleScreen()
{
SegaLogoFade = 0
SegaLogoCanMove = 0

	playMusic(MUSIC_CTRL_FADEOUT)
	kosinski.queue_size = 0

	zeroMemory(0xffffff10, 0x6c)

	ClearPatternLoadingQueue()
	global.zone_act = 0
	FadeOutScreenBlocking()
	set_status_register(0x2700)

	VDP.Config.enableHInt(false)
	VDP.Config.setNameTableBasePlaneA(0xc000)
	VDP.Config.setNameTableBasePlaneB(0xe000)
	VDP.Config.setPlayfieldSizeInPixels(512, 256)
	VDP.Config.setupWindowPlane(false, 0)			// Disable window plane
	VDP.Config.setVerticalScrolling(false, 0xff)	// Good old horizontal scrolling mode
	VDP.Config.setBackdropColor(0)
	VDP.Config.setRenderingModeConfiguration(false)

	water.fullscreen = 0
	level.water_present = 0

	fn0011ca()

	zeroMemory(0xffffac00, 0x400)
	zeroMemory(0xffffb000, 0x2000)
	zeroMemory(0xfffff700, 0x100)
	zeroMemory(0xffffee00, 0x100)

#if STANDALONE
	Renderer.resetSprites()

	// Move planes a bit to the right
	for (u8 i = 0; i < getScreenHeight(); ++i)
		u32[0xffffe000 + i*4] = getScreenExtend() * 0x10001
#endif

	fn01aa6e()

	zeroMemory(0xfffffc00, 0x100)

	checkpoint.number = 0
	global.stage_type = 0
	debug_mode.state = 0
	global.rolling_demo = 0
	u16[0xfffff634] = 0
	competition_mode.active = 0
	global.level_started = 0
	debug_mode.enabled.u8 = 0
	competition_mode.active = 0
	u16[0xffffffe4] = 0
	u16[0xffffffe6] = 0
	bluespheres.minigame_mode = 0
	global.demo_countdown = 359		// 6 seconds (minus one frame)
	u16[0xfffffb00] = 0
	u32[0xfffffbfc] = 0xfffffb00

	Kosinski.decompress(0x350d26, 0xffff0000)	// After this, A1 points to where uncompressed data ends
	updateSpritePattern(0xffff0000, 0x0000, A1.u16 >> 1)

	Enigma.decompress(0x34f6a0, 0xffff8000, 0x0000)
	if ((global.region_code & 0x80) == 0)
	{
		u32[0xffff83ac] = 0
	}
	copyRectToVRAM(0xffff8000, 0xc000, 0x28, 0x1c)

	copyMemory(0xfffffc80, 0x00460c, 0x20)

	global.demo_countdown = 240		// 4 seconds
	VDP.Config.setActiveDisplay(true)
	Menu.FadeInAfterInit()

#if STANDALONE
	// Stop any music that might be playing or restarting (this can happen after aborting a rolling demo)
	playMusic(MUSIC_CTRL_STOP)
#endif
    playSound(0xa1)
	segahasplayed = 200
	cesatrans = 0

	global.demo_countdown = 180		// 3 seconds
	while (global.demo_countdown != 0)
	{
		global.frame_state = 0x14
		waitForNextFrame()
	@EntryPoint_003fd2:
if (segahasplayed == 0)
{
		if (control.pad1.pressed & CONTROL_START)
			break
}

	#if STANDALONE
		Renderer.resetSprites()
		if (segahasplayed != 0) //Could also solve this by putting the fire stuff on a higher renderQueue
		{
			SegaLogoCanMove = 1
						if (SegaLogoFade != 255)
			{
				SegaLogoFade++
			}
            D0.u8 = (global.framecounter.low & 0xFF)
			Renderer.drawCustomSprite("splash_screen_sega_white", getScreenWidth() / 2 - 200, 0, 0x00, 0, 0x2000, 0, SegaLogoFade)
			if (SegaLogoCanMove == 1)
			{
			Renderer.drawCustomSprite("splash_screen_sega_red", getScreenWidth() / 2 - 200 + D0.u8 / 8, 0, 0x00, 0, 0x2000, 0, SegaLogoFade / 2)
			Renderer.drawCustomSprite("splash_screen_sega_orange", getScreenWidth() / 2 - 200 - D0.u8 / 8, 0, 0x00, 0, 0x2000, 0, SegaLogoFade / 2)
			}
			Renderer.drawCustomSprite("splash_screen_black_bg", getScreenWidth() / 2 - 200, 0, 0x00, 0, 0x2000, 0, 255)
		}
	#endif
	}

#if !STANDALONE
	playMusic(0xfe)
#endif

	// While loop: SEGA logo background fade from white to black
	A1 = 0x00459c
	while (true)
	{
		break
		global.frame_state = 0x02
		waitForNextFrame()

		copyMemory(0xfffffc00, A1, 0x0e)
		if (u16[A1] == 0)
			break

		A1 += 0x0e

	#if STANDALONE
		Renderer.resetSprites()
		if (u8[0xfffffc01] & 0x0e)
		{
			if (segahasplayed != 0) //Could also solve this by putting the fire stuff on a higher renderQueue
			{
				Renderer.drawCustomSprite("splash_screen_black_bg", getScreenWidth() / 2 - 200, 0, 0x00, 0, 0x2000, 0, 255)
			}
		}
	#endif
	}

	outro.wait_time = 0
	u16[0xfffff662] = 0
	u8[0xffffffbc] = 0xff
	titleintro.frames = 0
	titleintro.animstep = 1
	D0 = 1
	fn00440c()

	global.demo_countdown = (global.region_code & 0x40) ? 750 : 900
#if STANDALONE
	// Slightly increase the wait time until demo starts
	global.demo_countdown += 99999999999
#endif

	Kosinski.addToDecompressionQueue(0x351c86, 0xffff0000)

	// While loop: Intro sequence with Sonic running towards the camera
	while (true)
	{
		global.frame_state = 0x04
		Kosinski.ProcessDecompressionQueue()

		waitForNextFrame()

	#if STANDALONE
		// Overwrite two frames with custom widescreen versions
		if (titleintro.animstep == 7)
		{
			Renderer.drawCustomSprite("splash_screen_black_bg", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 8)
		{
			Renderer.drawCustomSprite("splash_screen_black_bg", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 6)
		{
			Renderer.drawCustomSprite("splash_screen_black_bg", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 5)
		{
			Renderer.drawCustomSprite("splash_screen_black_bg", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 4)
		{
			Renderer.drawCustomSprite("splash_screen_black_bg", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 3)
		{
			Renderer.drawCustomSprite("splash_screen_black_bg", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 2)
		{
			Renderer.drawCustomSprite("splash_screen_black_bg", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 1)
		{
			Renderer.drawCustomSprite("splash_screen_black_bg", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 9)
		{
			Renderer.drawCustomSprite("splash_screen_transition_1", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 10)
		{
			Renderer.drawCustomSprite("splash_screen_transition_2", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 11)
		{
			Renderer.drawCustomSprite("splash_screen_transition_3", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
		else if (titleintro.animstep == 12)
		{
			Renderer.drawCustomSprite("splash_screen_white_bg", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
		}
	#endif

		fn0043d4()
		UpdateGameObjects()
		RenderSprites()
		LoadRequiredSpritePatterns()



		if (titleintro.animstep >= 12)
			break
	}

	// White screen
	titleintro.animstep = 12
	fillMemory_u16(0xfffffc00, 0x80, 0x0eee)

#if STANDALONE
	titleintro.frames = 15
	global.frame_state = 0x04
	for (u8 k = 0; k < titleintro.frames; ++k)
	{
		waitForNextFrame()
	}

	// This is to make sure screen stays white in the next frame even if skipping the intro
	VDP.Config.setActiveDisplay(false)
#else
	titleintro.frames = 3
	global.frame_state = 0x04
	waitForNextFrame()
#endif

	// Fill the planes with decompressed screen content
	Kosinski.decompress(0x359fc6, 0xffff0000)	// After this, A1 points to where uncompressed data ends
	updateSpritePattern(0xffff0000, 0x0000, A1.u16 >> 1)

	Enigma.decompress(0x350018, 0xffff8000, 0x8000)
	copyRectToVRAM(0xffff8000, 0xc000, 0x28, 0x1c)

	Enigma.decompress(0x350112, 0xffff8000, 0x4000)
	copyRectToVRAM(0xffff8000, 0xe000, 0x28, 0x1c)

	global.frame_state = 0x04
	waitForNextFrame()

#if STANDALONE
	VDP.Config.setActiveDisplay(true)
#endif

	copyMemory(0xfffffc80, 0x0047ac, 0x80)

	// Load patterns used in title screen
	{
		// Large banner
		Nemesis.loadDataToVRAM(0x35026c, 0xa000)

		// Menu options
		Nemesis.loadDataToVRAM(0x004d2a, 0xd000)

		// Wiggling finger, twinkle, Tails & Tornado in BG
		Nemesis.loadDataToVRAM(0x2c49cc, 0x8000)

		// "& Knuckles"
		Nemesis.loadDataToVRAM(0x0d6498, 0x9800)
	}

	u32[0xffffb000] = 0x00482c
	u32[0xffffb04a] = 0x004a5c
	u32[0xffffb0de] = 0x004a1e
	u32[0xffffb128] = 0x004ae4
	u32[0xffffb172] = 0x004b54
	u32[0xffffb1bc] = 0x004bb2
	u32[0xffffb206] = 0x00496a
	titleintro.frames = 0

	#if STANDALONE
		global.whiteflash_timeout = 30
		airHighlightAnimationTimer = 0

		// This is needed for the background to be shown in first frame at all (when VDP sprite rendering seems to be disabled)
		Renderer.resetSprites()
	Renderer.drawCustomSprite("splash_screen_white_bg", getScreenExtend() - 40, 0, 0x00, 0, 0xffff)
	#endif

	while (true)
	{
		global.frame_state = 0x04
		waitForNextFrame()
	@EntryPoint:

		UpdateGameObjects()
		RenderSprites()
		LoadRequiredSpritePatterns()

	#if STANDALONE
		// Allow the player to press Start before the logo animation is finished already; only wait for the short white flash to finish
		if (global.whiteflash_timeout > 0)
			continue
	#else
		if (u32[0xffffb094] == 0)
			continue
	#endif

		if (global.demo_countdown == 0)
			break

		if ((control.pad1.pressed | control.player2.pressed) & CONTROL_START)
		{
			global.game_mode = 0x0c
			lives_counter = 3
			u8[0xfffffec6] = 3
			ring_counter = 0
			timer.alldata = 0
			player.score = 0
			u16[0xfffffed0] = 0
			u32[0xfffffed2] = 0
			u32[0xfffffed6] = 0
			continues_counter = 0
			player.next_life_score = 5000
			u32[0xffffffc4] = 5000

			playSound(MUSIC_CTRL_FADEOUT)

		#if STANDALONE
			// In S3AIR, there is no choice, sorry...
			global.game_mode = 0x4c

		#else
			D0 = u8[0xffffff86]
			if (D0.u8 == 0)
			{
				// Data Select
				global.game_mode = 0x4c
			}
			else if (D0.u8 == 1)
			{
				// Competition Mode
				global.game_mode = 0x38
			}
			else
			{
				// Level Select
				global.game_mode = 0x28
			}
		#endif
			return
		}
	}

	// Start rolling demo
	playSound(MUSIC_CTRL_FADEOUT)

#if STANDALONE
	if (u16[0xffffffd2] == 4)	// Skip FBZ demo for now, as it's not in the game yet
		++u16[0xffffffd2]
	if (u16[0xffffffd2] == 5)	// Skip SOZ demo because it's broken
		++u16[0xffffffd2]
	if (u16[0xffffffd2] == 6)	// Skip Blue Spheres demo because it's also broken
		u16[0xffffffd2] = 0
#endif

	u16[0xffffef7a] = u16[0xffffffd2]
	D0.u16 = (u16[0xffffffd2] & 0x07) * 2
	D0.u16 = u16[0x004344 + D0.s16]
	global.zone_act = D0.u16
	global.zone_act.apparent = D0.u16
	checkpoint.zone_act = D0.u16

	D1.u16 = u16[0xffffffd2] + 1
	if (global.lock_on_state == 0)
	{
		if (D1.u16 == 3)
		{
			D1 = 4
		}
		else if (D1.u16 >= 7)
		{
			D1 = 0
		}
	}
	else
	{
		if (D1.u16 >= 3)
		{
			D1 = 0
		}
	}

	u16[0xffffffd2] = D1.u16
	if (D0.s16 < 0)
	{
		// Blue Spheres rolling demo
		global.game_mode = 0x34
		global.next_bluespheres = 1
		global.sk_bluespheres = 1
		global.zone = 0x07
		u16[0xffffffb0] = 0
		u32[0xffffffb2] = 0
		u16[0xffffffb6] = 0
		u8[0xffffffb8] = 0
		u8[0xffffffb3] = 0x02
	}
	else
	{
		// Normal Game rolling demo
		global.game_mode = 0x08
	}

	global.rolling_demo = 1
	lives_counter = 3
	u8[0xfffffec6] = 3
	ring_counter = 0
	timer.alldata = 0
	player.score = 0
	u16[0xfffffed0] = 0
	u32[0xfffffed2] = 0
	u32[0xfffffed6] = 0
	player.next_life_score = 5000
	u32[0xffffffc4] = 5000
}

//# address-hook(0x0048dc) end(0x0048fe)
function void fn0048dc()
{
	--objA0.animation.timer
	if (s8(objA0.animation.timer) < 0)
	{
		objA0.animation.timer = 9
		objA0.animation.frame = (objA0.animation.frame + 4) & 0x1c
	}

	u32[0xfffffcda] = u32[0x004904 + objA0.animation.frame]
	DrawObject()

#if STANDALONE

	// Also draw the "Angel Island Revisited" text and others
	++airHighlightAnimationTimer
	s16 time = airHighlightAnimationTimer - 80

	u16 px = getScreenWidth() / 2
	u16 py = objA0.position.y.u16 - 53
	Renderer.drawCustomSprite("title_screen_logo", px, py, 0x00, SPRITE_FLAG_PRIO, 0xdfff)

	if (time > 0)
	{
		if (time < 65)
		{
			u8 alpha = (time < 20) ? (time * 255 / 20) : ((65 - time) * 255 / 45)
			Renderer.drawCustomSprite("title_screen_logo_flash", px, py, 0x00, SPRITE_FLAG_PRIO, 0xefff, 0, alpha)
		}

		Renderer.drawCustomSprite("title_screen_press_start", getScreenWidth() / 2, 208 + max((50 - time) * 2, 0), 0x00, 0, 0xffff)
	}

	Renderer.drawCustomSprite("title_screen_logo_embed", getScreenWidth() - 88, 204, 0x00, 0, 0xffff)

	// Here is a good place to draw the widescreen background
	Renderer.drawCustomSprite("splash_screen_white_bg", getScreenExtend() - 40, 0, 0x00, 0, 0xcfff)

	// Clear "Sonic The Hedgehog" text in VRAM
	for (u16 x = 0xb000; x < 0xb700; x += 0x80)
		for (u16 y = 0; y < 0x40; y += 2)
			setVRAM(x + y, 0)
#endif
}
