global u8 SettingCDSpindash = 1

function void Character.updateUprightOnGround()
{
	if (char.character == CHARACTER_TAILS && tails.carrying)
	{
		A1 = 0xffffb000
		objA1.flags2a |= char.flag.IN_AIR
		u8[A1 + 0x2e] = 0
		tails.carrying = 0
		tails.catch_timeout = 0
	}

	if (GameplayCDSpindash == 0)
	{
		if (Character.UpdateSpindashCD())
			return
	}
	else
	{
		if (Character.UpdateSpindash())
			return
	}

#if STANDALONE
	if (char.character == CHARACTER_SONIC)
	{
		if (Character.updateSuperPeelout())
			return
	}
#endif

	if (Character.CheckStartJump())
		return

	Character.UpdateUprightSlopeEffect()
	Character.updateUprightOnGroundInner()
	Character.CheckForStartRolling()

	Character.sharedUpdateOnGround()
}

function bool Character.UpdateSpindashCD()
{
#if STANDALONE
	// Ignore this while charging the Super Peel-Out
	if (char.spindash == 0x80)
		return false
#endif

	u8 input_state   = (char.character == CHARACTER_TAILS) ? control.tails.state   : control.player1.state
	u8 input_pressed = (char.character == CHARACTER_TAILS) ? control.tails.pressed : control.player1.pressed

	if (char.spindash == 0)
	{
		bool canStartSpindash = (char.state == char.state.COWERING) && (input_pressed & CONTROL_ABC)
		if (!canStartSpindash)
		{
			// Nothing to see here
			return false
		}

		// Start spindash
		char.state = SettingCDSpindash ? char.state.ROLLING : char.state.ROLLING
		Audio.playAudio("peelout_charge", AudioContext.CONTEXT_SOUND)
		
		if (SettingCDSpindash != 0)
		{
			char.hitbox_extends.y = 14
			char.hitbox_extends.x = 7
			s8 dy = s8(char.hitbox_extends.y) - s8(char.hitbox.default.y)
			char.position.y.u16 += global.inv_gravity ? dy : -dy
		}
					char.hitbox_extends.y = 14
			char.hitbox_extends.x = 7
			s8 dy = s8(char.hitbox_extends.y) - s8(char.hitbox.default.y)
			char.position.y.u16 += global.inv_gravity ? dy : -dy
		char.spindash = 1
		char.spindash_charge = 0
	}
	else
	{
		if (input_state & CONTROL_DOWN)
		{
			if ((abs(char.groundspeed) >= 0x0370) && (level.framecounter.low & 0x03))
			{
				Audio.playAudio("peelout_charge_loop", AudioContext.CONTEXT_SOUND)
			}
			if (char.spindash_charge >= 0x1) && (char.state == char.state.ROLLING)
			{
				char.state = char.state.ROLLING
				// Release spindash!
				char.hitbox_extends.y = 14
				char.hitbox_extends.x = 7
			}
			// Update spindash
			{
				if (char.flags & char.flag.FACING_LEFT)
				{
					if (super.active) || (super.active.tails)
						char.groundspeed = char.groundspeed - 0x30
					else
						char.groundspeed = char.groundspeed - 0x15

					if (char.spindash < 0x50)
					{
						if (char.spindash >= 0x200)
						{
							char.spindash_charge++
						}
					}
				}
		else
		{
			if (super.active) || (super.active.tails)
			{
				char.groundspeed = char.groundspeed + 0x30
				if (char.spindash < 0x50)
				{
					if (char.spindash >= 0x200)
					{
					char.spindash_charge++
					}
				}
			}
			else
			{
				char.groundspeed = char.groundspeed + 0x15
				if (char.spindash < 0x50)
				{
					if (char.spindash >= 0x200)
					{
					char.spindash_charge++
					}
				}
			}
		}
		}
	}
	else
	{
		if (SettingCDSpindash != 0) 
		{
			releaseSpindashCD()
		}
		else
		{
			releaseSpindashCD()
		}
	}

		// Center camera y-offset again
		centerCameraYOffset()
}

	Character.CheckAgainstMoveBorders()
	Character.UpdateRotationOnGround()
	partialUpdateCharacterOnGround()

	return true
}

function void releaseSpindashCD()
{
	u8 input_state   = (char.character == CHARACTER_TAILS) ? control.tails.state   : control.player1.state
	u8 characterHeight = (char.character == CHARACTER_TAILS) ? 15 : 19

	if ((input_state & CONTROL_DOWN) == 0)
	{
		// Release spindash!
		char.hitbox_extends.x = 7
		char.hitbox_extends.y = 14
		char.state = char.state.ROLLING
		char.flags |= char.flag.ROLLING
		char.spindash = 0

		u32 baseAddress
		s8 dy = 5
		if (char.character != CHARACTER_TAILS)
		{
			baseAddress = (super.active) ? 0x011d04 : 0x011cf2
		}
		else
		{
			baseAddress = (super.active.tails) ? 0x015320 : 0x01530e
			dy = 1
		}

		D0 = u16(char.spindash_charge >> 8) * 2
		if (char.groundspeed <= 0x600)
		{
			char.groundspeed = char.groundspeed * 2
		}
		else
		{
			char.groundspeed = 0x600 * 2
		}

		char.position.y.u16 += (global.inv_gravity) ? -dy : dy

		D0.u16 = (char.groundspeed - 0x800) * 2
		D0.u16 = 0x2000 - (D0.u16 & 0x1f00)

		// Camera delay
		if (A0 == 0xffffb000)
		{
			ClearPositionBackup()
			camera.locktime.player1 = D0.u16
		}
		else
		{
			camera.locktime.player2 = D0.u16
		}

		// Tell dust cloud object to disappear again
		u8[A6 + 0x20] = 0

		Audio.playAudio("peelout_release", AudioContext.CONTEXT_SOUND)
	}
	else if ((input_state & CONTROL_DOWN) == 0)
	{
		char.spindash = 0
		char.groundspeed = 0
		char.hitbox_extends.x = char.hitbox.default.x 
		char.hitbox_extends.y = char.hitbox.default.y
	}
}