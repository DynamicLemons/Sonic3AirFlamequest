function void Character.updateBonusEffects()
{
#if STANDALONE
	// Super Cancel
	if (Game.getSetting(SETTING_SUPER_CANCEL) && buttonPressed(BUTTON_Y))
	{
		bool isSuperActive = (char.character == CHARACTER_TAILS) ? super.active.tails : super.active
		u8 transformingState = (char.character == CHARACTER_TAILS) ? char.state.TAILS_TRANSFORM : char.state.TRANSFORMING
		if (isSuperActive && char.state != transformingState)
		{
			// Not in Doomsday and not in Sonic's AIZ intro
			if (global.zone_act != 0x0c00 && (char.control_flags & 0x40) == 0)
			{
				Character.cancelSuperTransformation()
				chooseFittingMusic()
				char.jumping = 0		// Do not allow another transformation until hit the ground
			}
		}
	}
#endif

	bool doRender = true
	if (char.invuln.countdown > 0)
	{
		doRender = ((char.invuln.countdown & 0x04) != 0)
		--char.invuln.countdown
	}
	if (doRender)
	{
		DrawObject()
	}

	if ((char.bonus_effect & char.bonus.INVINCIBLE) && char.invinc.countdown > 0)
	{
		if ((level.framecounter & 0x07) == 0)
		{
			--char.invinc.countdown
			if (char.invinc.countdown == 0)
			{
				// Back to normal
				if (!level.boss_encounter && char.drown_countdown >= 12)
				{
					playMusic(level.default_music)
				}
				char.bonus_effect &= ~char.bonus.INVINCIBLE

			#if STANDALONE
				// Half a second of extra invincibility
				char.invuln.countdown = max(char.invuln.countdown, 60)
			#endif
			}
		}
	}

	if ((char.bonus_effect & char.bonus.SPEED_UP) && char.speedup.countdown > 0)
	{
		if ((level.framecounter & 0x07) == 0)
		{
			--char.speedup.countdown
			if (char.speedup.countdown == 0)
			{
				char.bonus_effect &= ~char.bonus.SPEED_UP

				if (char.character != CHARACTER_KNUCKLES && competition_mode.active)
				{
					A1 = 0x1e3c00 + (char.character * 8)
					u16[A4] = u16[A1]
					u16[A4+2] = u16[A1+2]
					u16[A4+4] = u16[A1+4]
				}
				else
				{
					setSpeedCapProperties(A4)
					changeMusicTempo(0)
				}
			}
		}
	}
}

function void Character.cancelSuperTransformation()
{
	// Stop being super/hyper already
	super.active = 0
	char.double_jump_state = 0
	super.active.tails = 0
	super.palettefx.state = 2
	super.palettefx.frame = 30
	u8[0xfffff766] = 0xff

	if (char.character == CHARACTER_SONIC)
	{
		objA0.mapping_offset = 0x146620
	}
	char.state.former = 0x01
	char.invinc.countdown = 1

	// Reset physics
	setSpeedCapProperties(A4)

#if STANDALONE
	// Remove invincibility right away (otherwise it would be done in 2 frames because of "char.invinc.countdown", see above)
	//  -> This is done so that "chooseFittingMusic" does the right thing afterwards
	char.bonus_effect &= ~char.bonus.INVINCIBLE
	char.invinc.countdown = 0

	// Remove control flags set during super transformation
	//  -> Otherwise the game can get soft-locked when e.g. the game timer stops when just transforming
	if (char.state == char.state.TRANSFORMING && (char.control_flags & 0x81) == 0x81)
		char.control_flags &= ~0x81

	// If lightning shield is active, reload sprite patterns for the sparks
	if (u32[0xffffcce8] == 0x019732)
	{
		updateSpritePattern(0x18f8e4, 0xf760, 0x50)
	}

	Standalone.setFastMusicFlag(FastMusicFlag.SUPER_THEME, false)   // Disable fast music by Super Theme (if this was active)
#endif
}
