//# address-hook(0x02b928) end(0x02b962)
function void fn02b928()
{
	objA0.mapping_offset = 0x02ba9a
	objA0.render_flags |= render_flag.WORLD
	objA0.animation.sprite = objA0.subtype2c

	A1 = 0x02b968 + objA0.subtype2c * 6
	objA0.sprite_attributes = u16[A1]
	objA0.sprite_priority = u16[A1+2]
	objA0.box_size.x = u8[A1+4]
	objA0.box_size.y = u8[A1+5]

	objA0.update_address = 0x02b962
	fn02b962()
}

function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
	// This function gets called once when rendering an object, even if it consists of multiple VDP sprites
	//  -> That is in contrast to e.g. "Standalone.onDrawVdpSprite" which gets called for each VDP sprite
	//  -> So if an object's sprites should be replaced with a new loaded graphics, this here is the place to go

	u8 gameMode = global.game_mode & 0x7f
	bool prioFlag = (objA0.sprite_attributes & 0x8000) != 0

				// Sign
		if (objA0.update_address == 0x02b962) && (objA0.subtype2c == 0x2b)
		{
			u8 anim = (level.framecounter >> 2) % 6
				Renderer.drawCustomSprite(stringformat("fire_decoration_object_0%d", anim+1), px, py, 0x00, prioFlag ? SPRITE_FLAG_PRIO : 0, renderQueue+0x100, 0, 255)
			return true
		}

    return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
}